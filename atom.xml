<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HHH&#39;Blog</title>
  <subtitle>it&#39;s time to fight for myself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://super3h.me/"/>
  <updated>2017-03-11T15:15:38.044Z</updated>
  <id>https://super3h.me/</id>
  
  <author>
    <name>super3H</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>s2sh-大学资源共享网项目</title>
    <link href="https://super3h.me/2017/03/10/s2sh-%E5%A4%A7%E5%AD%A6%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E7%BD%91%E9%A1%B9%E7%9B%AE/"/>
    <id>https://super3h.me/2017/03/10/s2sh-大学资源共享网项目/</id>
    <published>2017-03-10T08:00:29.266Z</published>
    <updated>2017-03-11T15:15:38.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h1><h2 id="数据库问题"><a href="#数据库问题" class="headerlink" title="数据库问题"></a>数据库问题</h2><blockquote>
<p>突然发现当数据库中没有数据，直接级联添加<code>学校-学院-课程</code>，竟然会报如下错:</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR SqlExceptionHelper Cannot add or <span class="keyword">update</span> a <span class="keyword">child</span> <span class="keyword">row</span>: a foreign <span class="keyword">key</span> <span class="keyword">constraint</span> fails (<span class="string">`s2shtest01`</span>.<span class="string">`academy`</span>, <span class="keyword">CONSTRAINT</span> <span class="string">`FKiuc88a6pjg69r9krnm57slii4`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`aid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`school`</span> (<span class="string">`sid`</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>刚开始以为是<code>hibernate</code>没有添加<code>cascade</code>的缘故，集体原因不详，猜测为主从表不一致的问题.</p>
</blockquote>
<h2 id="json解决hibernate中级联对象延迟加载问题"><a href="#json解决hibernate中级联对象延迟加载问题" class="headerlink" title="json解决hibernate中级联对象延迟加载问题"></a>json解决hibernate中级联对象延迟加载问题</h2><ul>
<li>简介<blockquote>
<p>相信大部分用过Ext的GridPanel显示数据的朋友都遇到过外键数据的问题，首先是转换格式，将数据库里查出来的List集合要转换为JSON格式，如果只是用</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JSONObject json = <span class="keyword">new</span> JSONObject();    </div><div class="line">JSONArray dataArray = JSONArray.fromObject(list);</div></pre></td></tr></table></figure>
<ul>
<li><p>原因:</p>
<blockquote>
<p>如果list中的数据都是普通数据类型的那能正常转换，但很少这种情况，<font color="#FE3E49">大部分的数据都存在外键的数据，比如有个News类，他可能会有个发布人User的外键，那么用以上的方法转换是不行，将会出现死循环（我去了解到JSON它是这么一种机制，将数据拆分，一致拆分到全都是基本数据类型位置，比如，一个list存放着多个News数据，它是首先将list拆分成多个News，然后将News的多个属性都拆分出来，里面有个User对象，又得再拆分！问题就出现在这了，User里面又有一个News的集合，News里面又有User，因此导致死循环了）；</font></p>
</blockquote>
</li>
<li><p>解决方案</p>
<blockquote>
<p>json解决hibernate中级联对象延迟加载问题<code>net.sf.json.JSONException: org....</code><br>在hibernate中将pojo转化为json数据格式时，抛出：<font color="#48B456"><strong>net.sf.json.JSONException: org.hibernate.LazyInitializationException，</strong></font>通过网上的资料，解决办法如下(未列出所需库文件)：</p>
</blockquote>
</li>
<li><p>第一种:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JsonConfig jsonConfig = <span class="keyword">new</span> JsonConfig(); </div><div class="line">jsonConfig .setJsonPropertyFilter(<span class="keyword">new</span> PropertyFilter()&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Object source, String name, Object value)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"property1"</span>) || name.equals(<span class="string">"property2"</span>))&#123;<span class="comment">// 这里填写需要过滤的属性名</span></div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">JSONObject jsonModel= JSONArray.fromObject(yourObject, jsonConfig );</div></pre></td></tr></table></figure>
</li>
<li><p>第二种:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JsonConfig jsonConfig = <span class="keyword">new</span> JsonConfig();</div><div class="line"></div><div class="line">jsonConfig .setExcludes( <span class="keyword">new</span> String[]&#123; <span class="string">"property1"</span> , <span class="string">"property2"</span> &#125; ) ;</div><div class="line"></div><div class="line">JSONObject jsonModel= JSONArray.fromObject(yourObject, jsonConfig );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>详情请参考<a href="http://blog.csdn.net/evelyn2010816/article/details/6321758" target="_blank" rel="external">json解决hibernate中级联对象延迟加载问题net.sf.json.JSONException: </a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;所遇问题&quot;&gt;&lt;a href=&quot;#所遇问题&quot; class=&quot;headerlink&quot; title=&quot;所遇问题&quot;&gt;&lt;/a&gt;所遇问题&lt;/h1&gt;&lt;h2 id=&quot;数据库问题&quot;&gt;&lt;a href=&quot;#数据库问题&quot; class=&quot;headerlink&quot; title=&quot;数据库问题&quot;&gt;
    
    </summary>
    
      <category term="s2sh" scheme="https://super3h.me/categories/s2sh/"/>
    
    
  </entry>
  
  <entry>
    <title>ElementUI 学习</title>
    <link href="https://super3h.me/2017/03/10/ElementUI%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://super3h.me/2017/03/10/ElementUI 学习/</id>
    <published>2017-03-10T04:05:37.741Z</published>
    <updated>2017-03-10T04:09:16.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习中所遇问题"><a href="#学习中所遇问题" class="headerlink" title="学习中所遇问题"></a>学习中所遇问题</h1><h2 id="el中嵌套问题"><a href="#el中嵌套问题" class="headerlink" title="el中嵌套问题"></a>el中嵌套问题</h2><blockquote>
<p>el嵌套如果不显示，可以在中间嵌套div元素，如下表示:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkOutDiv"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">el-card</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-position</span>=<span class="string">"left"</span> <span class="attr">label-width</span>=<span class="string">"80px"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"所在大学"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">name</span>=<span class="string">"sName"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="el-form问题"><a href="#el-form问题" class="headerlink" title="el-form问题"></a>el-form问题</h2><p><code>label-position</code>必须配合<code>label-width</code>一起才能起作用</p>
<pre><code class="html">
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学习中所遇问题&quot;&gt;&lt;a href=&quot;#学习中所遇问题&quot; class=&quot;headerlink&quot; title=&quot;学习中所遇问题&quot;&gt;&lt;/a&gt;学习中所遇问题&lt;/h1&gt;&lt;h2 id=&quot;el中嵌套问题&quot;&gt;&lt;a href=&quot;#el中嵌套问题&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="ElementUI" scheme="https://super3h.me/categories/ElementUI/"/>
    
    
  </entry>
  
  <entry>
    <title>java初始化顺序</title>
    <link href="https://super3h.me/2017/03/09/java%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>https://super3h.me/2017/03/09/java初始化顺序/</id>
    <published>2017-03-09T06:53:22.326Z</published>
    <updated>2017-03-09T07:05:32.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子类继承父类实例化对象过程"><a href="#子类继承父类实例化对象过程" class="headerlink" title="子类继承父类实例化对象过程"></a>子类继承父类实例化对象过程</h1><blockquote>
<p>代码示例:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="comment">// 静态变量</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String p_StaticField = <span class="string">"父类--静态变量"</span>;</div><div class="line">    <span class="comment">// 变量(其实这用对象更好能体同这一点，如专门写一个类的实例)</span></div><div class="line">　　</div><div class="line">    <span class="comment">//如果这个变量放在初始化块的后面，是会报错的，因为你根本没有被初始化</span></div><div class="line">    <span class="keyword">public</span> String p_Field = <span class="string">"父类--变量"</span>;</div><div class="line">    <span class="comment">// 静态初始化块</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.out.println(p_StaticField);</div><div class="line">        System.out.println(<span class="string">"父类--静态初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化块</span></div><div class="line">    &#123;</div><div class="line">        System.out.println(p_Field);</div><div class="line">        System.out.println(<span class="string">"父类--初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 构造器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"父类--构造器"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="comment">// 静态变量</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s_StaticField = <span class="string">"子类--静态变量"</span>;</div><div class="line">    <span class="comment">// 变量</span></div><div class="line">    <span class="keyword">public</span> String s_Field = <span class="string">"子类--变量"</span>;</div><div class="line">    <span class="comment">// 静态初始化块</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.out.println(s_StaticField);</div><div class="line">        System.out.println(<span class="string">"子类--静态初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化块</span></div><div class="line">    &#123;</div><div class="line">        System.out.println(s_Field);</div><div class="line">        System.out.println(<span class="string">"子类--初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 构造器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//super();</span></div><div class="line">        System.out.println(<span class="string">"子类--构造器"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 程序入口</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"*************in main***************"</span>);</div><div class="line">        <span class="keyword">new</span> SubClass();</div><div class="line">        System.out.println(<span class="string">"*************second subClass***************"</span>);</div><div class="line">        <span class="keyword">new</span> SubClass();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">输出结果</div><div class="line">父类--静态变量</div><div class="line">父类--静态初始化块</div><div class="line">子类--静态变量</div><div class="line">子类--静态初始化块</div><div class="line">*************in main***************</div><div class="line">父类--变量</div><div class="line">父类--初始化块</div><div class="line">父类--构造器</div><div class="line">子类--变量</div><div class="line">子类--初始化块</div><div class="line">子类--构造器</div><div class="line">*************second subClass***************</div><div class="line">父类--变量</div><div class="line">父类--初始化块</div><div class="line">父类--构造器</div><div class="line">子类--变量</div><div class="line">子类--初始化块</div><div class="line">子类--构造器</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<font color="#E35671">累的加载过程不管多么复杂，<strong>总是按照-静态代码块-&gt;普通代码块-&gt;构造方法，这个顺序执行的</strong>，按照顺序一步步分析，将程序结构捋清楚就能避免不必要的错误。</font>

</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://blog.csdn.net/ganjing222/article/details/50993282" target="_blank" rel="external"> JAVA基础-子类继承父类实例化对象过程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;子类继承父类实例化对象过程&quot;&gt;&lt;a href=&quot;#子类继承父类实例化对象过程&quot; class=&quot;headerlink&quot; title=&quot;子类继承父类实例化对象过程&quot;&gt;&lt;/a&gt;子类继承父类实例化对象过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代码示例:&lt;/p&gt;
&lt;/b
    
    </summary>
    
      <category term="JavaSE" scheme="https://super3h.me/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>java错题总结</title>
    <link href="https://super3h.me/2017/03/07/java%E9%94%99%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://super3h.me/2017/03/07/java错题总结/</id>
    <published>2017-03-07T04:27:51.949Z</published>
    <updated>2017-03-07T05:02:28.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错题分析"><a href="#错题分析" class="headerlink" title="错题分析"></a>错题分析</h1><h2 id="Integer的考察"><a href="#Integer的考察" class="headerlink" title="Integer的考察"></a>Integer的考察</h2><blockquote>
<p>在jdk1.5的环境下，有如下4条语句：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Integer i01 = <span class="number">59</span>;</div><div class="line"><span class="keyword">int</span> i02 = <span class="number">59</span>;</div><div class="line">Integer i03 =Integer.valueOf(<span class="number">59</span>);</div><div class="line">Integer i04 = <span class="keyword">new</span> Integer(<span class="number">59</span>)</div></pre></td></tr></table></figure>
<ul>
<li>以下输出结果为false的是：<br><img src="/2017/03/07/java错题总结/1.png" alt=""><blockquote>
<p>解析如下:</p>
</blockquote>
</li>
</ul>
<p><img src="/2017/03/07/java错题总结/2.png" alt=""></p>
<h2 id="java类加载"><a href="#java类加载" class="headerlink" title="java类加载"></a>java类加载</h2><blockquote>
<p>以下哪项不属于java类加载过程？</p>
</blockquote>
<p><img src="/2017/03/07/java错题总结/3.png" alt=""></p>
<blockquote>
<p>分析如下:</p>
</blockquote>
<p><img src="/2017/03/07/java错题总结/4.png" alt=""></p>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><blockquote>
<p>列出<code>equals</code>的源码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Object 中euqals的源码如上。没有重写equals时，是直接用==判断的，而String中重写了equals方法</p>
</blockquote>
<h2 id="wait-方法和-sleep-方法的区别"><a href="#wait-方法和-sleep-方法的区别" class="headerlink" title="wait()方法和 sleep()方法的区别"></a>wait()方法和 sleep()方法的区别</h2><blockquote>
<p>这两个方法来自不同的类分别是，sleep来自Thread类，和wait来自Object类。</p>
</blockquote>
<ul>
<li><font color="#DB7676">sleep是Thread的静态类方法，谁调用的谁去睡觉，即使在a线程里调用了b的sleep方法，实际上还是a去睡觉，要让b线程睡觉要在b的代码中调用sleep。</font></li>
<li><font color="red"><strong>最主要是sleep方法没有释放锁，而wait方法释放了锁，使得敏感词线程可以使用同步控制块或者方法。</strong></font>sleep不出让系统资源；wait是进入线程等待池等待，出让系统资源敏感词线程可以占用CPU。一般wait不会加时间限制，因为如果wait线程的运行资源不够，再出来也没用，要等待敏感词线程调用notify/notifyAll唤醒等待池中的所有线程，才会进入就绪队列等待OS分配系统资源。sleep(milliseconds)可以用时间指定使它自动唤醒过来，如果时间不到只能调用interrupt()强行打断。<font color="#25CB73"><strong><em>Thread.Sleep(0)的作用是“触发操作系统立刻重新进行一次CPU竞争”。</em></strong></font>
</li>
<li><p>使用范围：wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(x)&#123; </div><div class="line">   x.notify() </div><div class="line">  <span class="comment">//或者wait() </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;错题分析&quot;&gt;&lt;a href=&quot;#错题分析&quot; class=&quot;headerlink&quot; title=&quot;错题分析&quot;&gt;&lt;/a&gt;错题分析&lt;/h1&gt;&lt;h2 id=&quot;Integer的考察&quot;&gt;&lt;a href=&quot;#Integer的考察&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="JavaSE" scheme="https://super3h.me/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>log4J的使用</title>
    <link href="https://super3h.me/2017/03/02/log4J%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://super3h.me/2017/03/02/log4J的使用/</id>
    <published>2017-03-02T08:33:38.706Z</published>
    <updated>2017-03-03T05:20:12.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="log4J的安装"><a href="#log4J的安装" class="headerlink" title="log4J的安装"></a>log4J的安装</h1><p>进入官网下载即可<a href="http://logging.apache.org/log4j/1.2/download.html" target="_blank" rel="external">http://logging.apache.org/log4j/1.2/download.html</a></p>
<h1 id="log4J的配置及解释"><a href="#log4J的配置及解释" class="headerlink" title="log4J的配置及解释"></a>log4J的配置及解释</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># Define the root logger with appender file</div><div class="line">log4j.rootLogger = DEBUG, FILE</div><div class="line"></div><div class="line"># Define the file appender</div><div class="line">log4j.appender.FILE=org.apache.log4j.FileAppender</div><div class="line"># Set the name of the file</div><div class="line">log4j.appender.FILE.File=C:\log.out</div><div class="line"></div><div class="line"># Set the immediate flush to true (default)</div><div class="line">log4j.appender.FILE.ImmediateFlush=true</div><div class="line"></div><div class="line"># Set the threshold to debug mode</div><div class="line">log4j.appender.FILE.Threshold=debug</div><div class="line"></div><div class="line"># Set the append to false, overwrite</div><div class="line">log4j.appender.FILE.Append=false</div><div class="line"></div><div class="line"># Define the layout for file appender</div><div class="line">log4j.appender.FILE.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.FILE.layout.conversionPattern=%m%n</div></pre></td></tr></table></figure>
<ul>
<li>根日志记录器(logger)的级别定义为DEBUG并连接附加器命名为FILE</li>
<li>附加器(appender)File是定义为org.apache.log4j.FileAppender并写入到一个名为“log.out”位于日志log目录下</li>
<li>定义的布局模式是%m%n，这意味着每打印日志消息之后，将加上一个换行符<blockquote>
<p>注意:<font color="#4ACC60">log4j支持UNIX风格的变量替换，如 ${variableName}.</font></p>
</blockquote>
</li>
</ul>
<h2 id="调试级别"><a href="#调试级别" class="headerlink" title="调试级别"></a>调试级别</h2><p>使用DEBUG两个追加程序。所有可能的选项有：</p>
<ul>
<li>TRACE</li>
<li>DEBUG</li>
<li>INFO</li>
<li>WARN</li>
<li>ERROR</li>
<li>FATAL</li>
<li>ALL</li>
</ul>
<h2 id="Appenders"><a href="#Appenders" class="headerlink" title="Appenders"></a>Appenders</h2><blockquote>
<p>Apache的log4j提供<code>Appender</code>对象<font color="#FFAA25"><strong>主要负责打印日志消息到不同的目的地</strong></font>，如控制台，文件，sockets，NT事件日志等等。<br>每个<code>Appender</code>对象具有与之相关联的不同的属性，并且这些属性表明对象的行为</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td>Appender使用布局Layout 对象和与之相关的格式化的日志记录信息转换模式</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td>目标可以是一个控制台，一个文件，或根据附加器的另一个项目</td>
</tr>
<tr>
<td style="text-align:center">level</td>
<td>级别是必需的，以控制日志消息的过滤</td>
</tr>
<tr>
<td style="text-align:center">threshold</td>
<td>Appender可以有与之独立的记录器级别相关联的级别阈值水平。Appender忽略具有级别低于阈级别的任何日志消息</td>
</tr>
<tr>
<td style="text-align:center">filter</td>
<td>Filter 对象可以分析超出级别的匹配记录信息，并决定是否记录的请求应该由一个特定 Appender 或忽略处理</td>
</tr>
</tbody>
</table>
<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>我们使用的PatternLayout 使用 appender。所有可能的选项有：</p>
<ul>
<li>DateLayout</li>
<li>HTMLLayout</li>
<li><a href="http://www.yiibai.com/log4j/log4j_patternlayout.html" target="_blank" rel="external">PatternLayout</a></li>
<li><a href="http://www.yiibai.com/log4j/log4j_htmllayout.html" target="_blank" rel="external">SimpleLayout</a></li>
<li>XMLLayout<blockquote>
<p>使用HTMLLayout和XMLLayout，可以在HTML和XML格式和生成日志。</p>
</blockquote>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><code>properties</code>相关配置详情请看<a href="http://www.yiibai.com/log4j/log4j_configuration.html" target="_blank" rel="external">log4j配置</a></li>
<li><code>xml</code>相关配置详情请看<a href="http://www.cnblogs.com/v-weiwang/p/4814050.html" target="_blank" rel="external">springmvc+log4j操作日志记录,详细配置 </a></li>
</ul>
<h1 id="log4J配置文件位置"><a href="#log4J配置文件位置" class="headerlink" title="log4J配置文件位置"></a>log4J配置文件位置</h1><h2 id="默认加载"><a href="#默认加载" class="headerlink" title="默认加载"></a>默认加载</h2><blockquote>
<p>log4j启动时，<font color="#CF59E0">默认会寻找source folder下的log4j.xml配置文件，<strong>若没有，会寻找log4j.properties文件。</strong></font>然后加载配置。配置文件放置位置正确，不用在程序中手动加载log4j配置文件。</p>
</blockquote>
<p><img src="/2017/03/02/log4J的使用/1.png" alt=""></p>
<h2 id="手动加载配置文件"><a href="#手动加载配置文件" class="headerlink" title="手动加载配置文件"></a>手动加载配置文件</h2><blockquote>
<p>可以通过<code>PropertyConfigurator.configure(&quot;url&quot;)</code>来手动加载配置文件，示例如下:</p>
</blockquote>
<p><img src="/2017/03/02/log4J的使用/2.jpg" alt=""></p>
<blockquote>
<p>相应代码如下:<code>PropertyConfigurator.configure(&quot;config/log4j.properties&quot;);</code></p>
</blockquote>
<h2 id="log4J报错"><a href="#log4J报错" class="headerlink" title="log4J报错"></a>log4J报错</h2><blockquote>
<p>如果上述方法报以下错:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">log4j:ERROR Could not read configuration file [log4j.properties].</div><div class="line">java.io.FileNotFoundException: log4j.properties (系统找不到指定的文件。)</div><div class="line"> at java.io.FileInputStream.open(Native Method)</div><div class="line"> at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:<span class="number">106</span>)</div><div class="line"> at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:<span class="number">66</span>)</div><div class="line"> at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:<span class="number">306</span>)</div><div class="line"> at org.apache.log4j.PropertyConfigurator.configure(PropertyConfigurator.java:<span class="number">324</span>)</div><div class="line"> at snmp.GetSnmpInfo.&lt;clinit&gt;(GetSnmpInfo.java:<span class="number">32</span>)</div><div class="line">log4j:ERROR Ignoring configuration file [log4j.properties].</div></pre></td></tr></table></figure>
<ul>
<li>解决方案:<ul>
<li><code>方案1:</code>将log4j.properties 这个文件从src的根目录 转移到 项目的根目录下面，即可~~~；</li>
<li><code>方案2:</code>添加以下代码<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获得当前目录路径</span></div><div class="line">        String filePath = <span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath();</div><div class="line">        <span class="comment">// 找到log4j.properties配置文件所在的目录(已经创建好)</span></div><div class="line">        filePath = filePath.substring(<span class="number">1</span>).replace(<span class="string">"bin"</span>, <span class="string">"src"</span>);</div><div class="line">        <span class="comment">// 获得日志类loger的实例</span></div><div class="line">        loger = Logger.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">        <span class="comment">// loger所需的配置文件路径</span></div><div class="line">        PropertyConfigurator.configure(filePath + <span class="string">"log4j.properties"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><p>详情请看<a href="http://blog.csdn.net/lifuxiangcaohui/article/details/11042375" target="_blank" rel="external">log4j配置文件位置详解</a><br>详情请看<a href="http://www.cnblogs.com/tv151579/archive/2013/01/20/2868912.html" target="_blank" rel="external">log4j:ERROR Could not read configuration file [log4j.properties]. </a></p>
<h1 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h1><p><a href="http://www.yiibai.com/log4j/log4j_logging_files.html" target="_blank" rel="external">log4j日志记录到文件</a><br><a href="http://www.yiibai.com/log4j/log4j_logging_database.html" target="_blank" rel="external">log4j日志记录到数据库</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;log4J的安装&quot;&gt;&lt;a href=&quot;#log4J的安装&quot; class=&quot;headerlink&quot; title=&quot;log4J的安装&quot;&gt;&lt;/a&gt;log4J的安装&lt;/h1&gt;&lt;p&gt;进入官网下载即可&lt;a href=&quot;http://logging.apache.org/log
    
    </summary>
    
      <category term="log4J" scheme="https://super3h.me/categories/log4J/"/>
    
    
  </entry>
  
  <entry>
    <title>s2sh三大框架的整合</title>
    <link href="https://super3h.me/2017/03/01/s2sh%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>https://super3h.me/2017/03/01/s2sh三大框架的整合/</id>
    <published>2017-03-01T00:32:37.142Z</published>
    <updated>2017-03-03T07:31:15.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>断断续续的学完了三大框架，自己也想尝试整合三大框架，这里记录我碰到的问题，以及学习的过程。</p>
</blockquote>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h1 id="struts有关错误"><a href="#struts有关错误" class="headerlink" title="struts有关错误"></a>struts有关错误</h1><ul>
<li>使用<code>modelDriven</code>遇到的错误,报错如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">ERROR ParametersInterceptor Developer <span class="title">Notification</span> <span class="params">(set struts.devMode to <span class="keyword">false</span> to disable <span class="keyword">this</span> message)</span>:</span></div><div class="line">Unexpected Exception caught setting 'age' on 'class test.hhh.action.PersonAction: Error setting expression 'age' with value '20'</div><div class="line">ERROR ParametersInterceptor Developer <span class="title">Notification</span> <span class="params">(set struts.devMode to <span class="keyword">false</span> to disable <span class="keyword">this</span> message)</span>:</div><div class="line">Unexpected Exception caught setting 'name' on 'class test.hhh.action.PersonAction: Error setting expression 'name' with value 'hhh'</div></pre></td></tr></table></figure>
<blockquote>
<p>原因如下:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//action中如下写</span></div><div class="line"><span class="keyword">private</span> Person model;</div><div class="line"><span class="comment">//由于model对象还没new，其内部为空，所以导致获取的model为null，改法如下</span></div><div class="line"><span class="keyword">private</span> Person model = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<ul>
<li>spring和struts整合报错如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">ERROR Dispatcher Dispatcher initialization failed</div><div class="line"> Unable to load configuration. - [unknown location]</div><div class="line">	at com.opensymphony.xwork2.config.ConfigurationManager.getConfiguration(ConfigurationManager.java:<span class="number">70</span>)</div><div class="line">	at org.apache.struts2.dispatcher.Dispatcher.getContainer(Dispatcher.java:<span class="number">906</span>)</div><div class="line">	at org.apache.struts2.dispatcher.Dispatcher.init_PreloadConfiguration(Dispatcher.java:<span class="number">445</span>)</div><div class="line">	at org.apache.struts2.dispatcher.Dispatcher.init(Dispatcher.java:<span class="number">486</span>)</div><div class="line">	at org.apache.struts2.dispatcher.InitOperations.initDispatcher(InitOperations.java:<span class="number">75</span>)</div><div class="line">	at org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter.init(StrutsPrepareAndExecuteFilter.java:<span class="number">63</span>)</div><div class="line">	at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:<span class="number">279</span>)</div><div class="line">	at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:<span class="number">260</span>)</div><div class="line">	at org.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFilterConfig.java:<span class="number">105</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:<span class="number">4572</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:<span class="number">5215</span>)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="number">150</span>)</div><div class="line">	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="number">1419</span>)</div><div class="line">	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="number">1409</span>)</div><div class="line">	at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">	at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: Cannot locate the chosen ObjectFactory implementation: spring - [unknown location]</div><div class="line">	at org.apache.struts2.config.AbstractBeanSelectionProvider.alias(AbstractBeanSelectionProvider.java:<span class="number">64</span>)</div><div class="line">	at org.apache.struts2.config.AbstractBeanSelectionProvider.alias(AbstractBeanSelectionProvider.java:<span class="number">41</span>)</div><div class="line">	at org.apache.struts2.config.DefaultBeanSelectionProvider.register(DefaultBeanSelectionProvider.java:<span class="number">366</span>)</div><div class="line">	at com.opensymphony.xwork2.config.impl.DefaultConfiguration.reloadContainer(DefaultConfiguration.java:<span class="number">163</span>)</div><div class="line">	at com.opensymphony.xwork2.config.ConfigurationManager.getConfiguration(ConfigurationManager.java:<span class="number">67</span>)</div><div class="line">	... <span class="number">17</span> more</div><div class="line">三月 <span class="number">01</span>, <span class="number">2017</span> <span class="number">9</span>:<span class="number">48</span>:<span class="number">48</span> 下午 org.apache.catalina.core.StandardContext filterStart</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>解释:<font color="#ED8F76">struts没有交给spring管理或者你根本没导入<code>struts2-spring-plugin-2.5.5.jar</code>。和以下配置</font><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="hibernate有关错误"><a href="#hibernate有关错误" class="headerlink" title="hibernate有关错误"></a>hibernate有关错误</h1><ul>
<li><p>错误如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Already value [org.springframework.orm.hibernate5.SessionHolder@<span class="number">43826</span>ec] <span class="keyword">for</span> key [org.hibernate.internal.SessionFactoryImpl@<span class="number">304</span>a3655] bound to thread [main]</div></pre></td></tr></table></figure>
</li>
<li><p>解决方案:<font color="#FF0000">由于spring配置问题，类<code>LocalSessionFactoryBean</code>应该来自于<code>org.springframework.orm.hibernate5</code>而不是<code>org.springframework.orm.hibernate4</code></font></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--注意:PersonDaoImpl和LocalSessionFactoryBean都要来自于hibernate5的包下--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:hibernate.cfg.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personDao"</span> <span class="attr">class</span>=<span class="string">"test.hhh.dao.Impl.PersonDaoImpl"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"factory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>PersonDaoImpl和LocalSessionFactoryBean</code>来自的包必须相同，不能一个来自于<code>hibernate5</code>一个<code>hibernate4</code></p>
</blockquote>
<h1 id="s2sh整合时遇到错误"><a href="#s2sh整合时遇到错误" class="headerlink" title="s2sh整合时遇到错误"></a>s2sh整合时遇到错误</h1><ul>
<li>web.xml中spring的配置如下:<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/classes/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>读取时从创建时候设置的文件目录读取，所以此处要加<code>WEB-INF/classes/</code>或者从src下读取，即添加以下配置<code>classpath:applicationContext.xml</code>否者会报错</p>
</blockquote>
<ul>
<li>applicationContext.xml中导入数据源配置文件:<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:dataSource.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意：<font color="#ED8F76"><strong>加上classpath是让spring从src中读取</strong></font></p>
</blockquote>
<h1 id="Log4J日志配置"><a href="#Log4J日志配置" class="headerlink" title="Log4J日志配置"></a>Log4J日志配置</h1><h2 id="所需jar包"><a href="#所需jar包" class="headerlink" title="所需jar包"></a>所需jar包</h2><ul>
<li>如下图<br><img src="/2017/03/01/s2sh三大框架的整合/1.png" alt=""></li>
</ul>
<h2 id="web-xml配置如下"><a href="#web-xml配置如下" class="headerlink" title="web.xml配置如下"></a>web.xml配置如下</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- log4j配置，文件路径，因为是跟随项目启动 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>loggingLevel<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>info<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 加载log4j配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="log4J-properties配置"><a href="#log4J-properties配置" class="headerlink" title="log4J.properties配置"></a>log4J.properties配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Define the root logger with appender file</div><div class="line">log4j.rootLogger = DEBUG, FILE</div><div class="line"></div><div class="line"># Define the file appender</div><div class="line">log4j.appender.FILE=org.apache.log4j.FileAppender</div><div class="line"># Set the name of the file</div><div class="line">log4j.appender.FILE.File=G:\\log4J\u65E5\u5FD7\\s2sh_test01\\htmlLayout.html</div><div class="line"></div><div class="line"># Set the immediate flush to true (default)</div><div class="line">log4j.appender.FILE.ImmediateFlush=true</div><div class="line"></div><div class="line"># Set the threshold to debug mode</div><div class="line">log4j.appender.FILE.Threshold=debug</div><div class="line"></div><div class="line"># Define the layout for file appender</div><div class="line">log4j.appender.FILE.layout=org.apache.log4j.HTMLLayout</div><div class="line">log4j.appender.FILE.layout.Title=HTML Layout Example</div><div class="line">log4j.appender.FILE.layout.LocationInfo=true</div></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.cnblogs.com/S-E-P/archive/2012/01/18/2325253.html" target="_blank" rel="external">Struts2学习笔记——Struts2与Spring整合</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;断断续续的学完了三大框架，自己也想尝试整合三大框架，这里记录我碰到的问题，以及学习的过程。&lt;/p&gt;
&lt;/block
    
    </summary>
    
      <category term="s2sh" scheme="https://super3h.me/categories/s2sh/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-hibernate整合</title>
    <link href="https://super3h.me/2017/02/26/Spring-hibernate%E6%95%B4%E5%90%88/"/>
    <id>https://super3h.me/2017/02/26/Spring-hibernate整合/</id>
    <published>2017-02-26T07:42:36.485Z</published>
    <updated>2017-02-26T08:49:56.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="所需jar包"><a href="#所需jar包" class="headerlink" title="所需jar包"></a>所需jar包</h1><p><img src="/2017/02/26/Spring-hibernate整合/1.png" alt=""></p>
<blockquote>
<p>导入<code>hibernate-release-5.2.5.Final\lib\required</code>下面的包以及spring中事务<code>spring-tx</code>包和对象关系映射<code>spring-orm</code>，jdbc<code>spring-jdbc</code>，注解所需的<code>spring-aop</code>，和<code>beans，core，context，expression</code>以及<code>commons-logging</code>依赖包，还有<code>mysql的驱动包：mysql-connector</code></p>
</blockquote>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul>
<li><code>applicationContext.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class="line">	http://www.springframework.org/schema/jdbc</div><div class="line">	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</div><div class="line">	http://www.springframework.org/schema/tx</div><div class="line">	http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">	"&gt;</div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>dataSource.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--加入hibernate.cfg.xml配置--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:hibernate.cfg.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personDao"</span> <span class="attr">class</span>=<span class="string">"com.hhh.dao.impl.PersonDaoImpl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"factory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--配置事务--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>注意:</code>有关<code>txManager</code>的必须加上，否则<font color="red">dao中<code>sessionFactory.getCurrentSession()</code>会报错:<code>Could not obtain transaction-synchronized Session for current thread</code></font><br><code>原因:</code><font color="#658B00">在Spring事务管理中,current Session是绑定到SpringSessionContext中的,而不是ThreadLocalSessionContext中的，切勿在<strong>hibernate中配置:hibernate.current_session_context_class=thread</strong></font><br>详情请看<a href="http://blog.csdn.net/irelandken/article/details/7193123" target="_blank" rel="external">@Transactional声明式事务管理  getCurrentSession</a></p>
</blockquote>
<ul>
<li><p><code>hibernate.cfg.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5InnoDBDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">       	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/hhh/bean/person.hbm.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库配置:<code>dataSource.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">driverClassName=com.mysql.jdbc.Driver</div><div class="line">url=jdbc:mysql://localhost:3306/shtest</div><div class="line">username=****</div><div class="line">password=****</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="代码详情"><a href="#代码详情" class="headerlink" title="代码详情"></a>代码详情</h1><ul>
<li><p><code>com.hhh.bean.Person</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Long id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Person [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>com.hhh.dao.PersonDao</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.bean.Person;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Person person)</span></span>;</div><div class="line">	</div><div class="line">	<span class="function">List&lt;Person&gt; <span class="title">listAllPerson</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>com.hhh.dao.impl.PersonDaoImpl</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.dao.impl;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.support.HibernateDaoSupport;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.bean.Person;</div><div class="line"><span class="keyword">import</span> com.hhh.dao.PersonDao;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> SessionFactory factory;</div><div class="line">	</div><div class="line">	<span class="meta">@Transactional</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		Session session = factory.getCurrentSession();</div><div class="line">		session.save(person);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Transactional</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">listAllPerson</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = factory.getCurrentSession();</div><div class="line">		List&lt;Person&gt; persons = session.createQuery(<span class="string">"FROM Person"</span>).getResultList();</div><div class="line">		<span class="keyword">return</span> persons;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(SessionFactory factory)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.factory = factory;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试类:<code>com.hhh.test.TestApp</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.bean.Person;</div><div class="line"><span class="keyword">import</span> com.hhh.dao.PersonDao;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHB</span><span class="params">()</span></span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		SessionFactory factory = (SessionFactory) context.getBean(<span class="string">"sessionFactory"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddPerson</span><span class="params">()</span></span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		PersonDao dao = (PersonDao) context.getBean(<span class="string">"personDao"</span>);</div><div class="line">		Person person = <span class="keyword">new</span> Person(<span class="string">"hhh"</span>,<span class="number">20</span>);</div><div class="line">		dao.addPerson(person);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListPerson</span><span class="params">()</span></span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		PersonDao dao = (PersonDao) context.getBean(<span class="string">"personDao"</span>);</div><div class="line">		List&lt;Person&gt; persons = dao.listAllPerson();</div><div class="line">		<span class="keyword">for</span>(Person p:persons)&#123;</div><div class="line">			System.out.println(p);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="代码详情-1"><a href="#代码详情-1" class="headerlink" title="代码详情"></a>代码详情</h1><p>请点此处：<a href="https://github.com/super3H/j2EE/tree/master/Spring-Hibernate" target="_blank" rel="external">Spring-Hibernate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;所需jar包&quot;&gt;&lt;a href=&quot;#所需jar包&quot; class=&quot;headerlink&quot; title=&quot;所需jar包&quot;&gt;&lt;/a&gt;所需jar包&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2017/02/26/Spring-hibernate整合/1.png&quot; alt=&quot;&quot;
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring AOP+AspectJ</title>
    <link href="https://super3h.me/2017/02/25/Spring%20AOP+AspectJ/"/>
    <id>https://super3h.me/2017/02/25/Spring AOP+AspectJ/</id>
    <published>2017-02-25T08:25:17.145Z</published>
    <updated>2017-02-25T08:45:08.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>常见AspectJ的注解：<ul>
<li><code>@Before:</code>方法执行前运行</li>
<li><code>@After:</code>运行在方法返回结果后</li>
<li><code>@AfterReturning:</code>运行在方法返回一个结果后，在拦截器返回结果</li>
<li><code>@AfterThrowing:</code>运行方法在抛出异常后</li>
<li><code>@Around:</code>围绕方法执行运行，结合以上这三个通知<blockquote>
<p><code>注意:</code>Spring AOP 中没有 AspectJ 支持</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="/2017/02/25/Spring AOP+AspectJ/1.png" alt=""></p>
<h1 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring Beans"></a>Spring Beans</h1><blockquote>
<p>普通 bean 中有几个方法，后来通过 AspectJ 注解拦截</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.bo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerBo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="function">String <span class="title">addCustomerReturnValue</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addCustomerThrowException</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addCustomerAround</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.bo.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.yiibai.customer.bo.CustomerBo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBoImpl</span> <span class="keyword">implements</span> <span class="title">CustomerBo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"addCustomer() is running "</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addCustomerReturnValue</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"addCustomerReturnValue() is running "</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"abc"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomerThrowException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"addCustomerThrowException() is running "</span>);</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Generic Error"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomerAround</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"addCustomerAround() is running, args : "</span> + name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="启用AspectJ"><a href="#启用AspectJ" class="headerlink" title="启用AspectJ"></a>启用AspectJ</h1><blockquote>
<p>在 Spring 配置文件，把<code>“&lt;aop:aspectj-autoproxy /&gt;”</code>，并定义Aspect(拦截)和普通的bean。<br>File : applicationContext.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </div><div class="line">	http://www.springframework.org/schema/aop </div><div class="line">	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerBo"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.customer.bo.impl.CustomerBoImpl"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Aspect --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.aspect.LoggingAspect"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="AspectJ-Before"><a href="#AspectJ-Before" class="headerlink" title="AspectJ @Before"></a>AspectJ @Before</h1><blockquote>
<p>在下面例子中，logBefore()方法将在 customerBo接口的 addCustomer()方法的执行之前被执行。<br><strong>AspectJ的“切入点”是用来声明哪种方法将被拦截</strong></p>
</blockquote>
<ul>
<li><p>File : LoggingAspect.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.aspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinYiibai;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* com.yiibai.customer.bo.CustomerBo.addCustomer(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBefore</span><span class="params">(JoinYiibai joinYiibai)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"logBefore() is running!"</span>);</div><div class="line">		System.out.println(<span class="string">"hijacked : "</span> + joinYiibai.getSignature().getName());</div><div class="line">		System.out.println(<span class="string">"******"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CustomerBo customer = (CustomerBo) appContext.getBean(<span class="string">"customerBo"</span>);</div><div class="line">customer.addCustomer();</div></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">logBefore() is running!</div><div class="line">hijacked : addCustomer</div><div class="line">******</div><div class="line">addCustomer() is running</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="AspectJ-After"><a href="#AspectJ-After" class="headerlink" title="AspectJ @After"></a>AspectJ @After</h1><blockquote>
<p>在下面例子中，logAfter()方法将在 customerBo 接口的 addCustomer()方法的执行之后执行。</p>
</blockquote>
<ul>
<li>File : LoggingAspect.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.aspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinYiibai;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@After</span>(<span class="string">"execution(* com.yiibai.customer.bo.CustomerBo.addCustomer(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfter</span><span class="params">(JoinYiibai joinYiibai)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"logAfter() is running!"</span>);</div><div class="line">		System.out.println(<span class="string">"hijacked : "</span> + joinYiibai.getSignature().getName());</div><div class="line">		System.out.println(<span class="string">"******"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="AspectJ-AfterReturning"><a href="#AspectJ-AfterReturning" class="headerlink" title="AspectJ @AfterReturning"></a>AspectJ @AfterReturning</h1><blockquote>
<p>在下面例子中，logAfterReturning()方法将在 customerBo 接口的addCustomerReturnValue()方法执行之后执行。此外，<em>还可以截取返回的值使用“returning”属性。</em></p>
<font color="red">要截取返回的值，对“returning”属性(结果)的值必须用相同的方法参数(结果)</font>

</blockquote>
<ul>
<li><p>File : LoggingAspect.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.aspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinYiibai;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="meta">@AfterReturning</span>(</div><div class="line">      pointcut = <span class="string">"execution(* com.yiibai.customer.bo.CustomerBo.addCustomerReturnValue(..))"</span>,</div><div class="line">      returning= <span class="string">"result"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterReturning</span><span class="params">(JoinYiibai joinYiibai, Object result)</span> </span>&#123;</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"logAfterReturning() is running!"</span>);</div><div class="line">	System.out.println(<span class="string">"hijacked : "</span> + joinYiibai.getSignature().getName());</div><div class="line">	System.out.println(<span class="string">"Method returned value is : "</span> + result);</div><div class="line">	System.out.println(<span class="string">"******"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">addCustomerReturnValue() <span class="function">is running </span></div><div class="line"><span class="title">logAfterReturning</span><span class="params">()</span> is running!</div><div class="line">hijacked : addCustomerReturnValue</div><div class="line">Method returned value is : abc</div><div class="line">******</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="AspectJ-AfterReturning-1"><a href="#AspectJ-AfterReturning-1" class="headerlink" title="AspectJ @AfterReturning"></a>AspectJ @AfterReturning</h1><blockquote>
<p>在下面的例子中，如果 customerBo 接口的addCustomerThrowException()方法抛出异常logAfterThrowing()方法将被执行。</p>
</blockquote>
<ul>
<li><p>File : LoggingAspect.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.aspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinYiibai;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="meta">@AfterThrowing</span>(</div><div class="line">      pointcut = <span class="string">"execution(* com.yiibai.customer.bo.CustomerBo.addCustomerThrowException(..))"</span>,</div><div class="line">      throwing= <span class="string">"error"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterThrowing</span><span class="params">(JoinYiibai joinYiibai, Throwable error)</span> </span>&#123;</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"logAfterThrowing() is running!"</span>);</div><div class="line">	System.out.println(<span class="string">"hijacked : "</span> + joinYiibai.getSignature().getName());</div><div class="line">	System.out.println(<span class="string">"Exception : "</span> + error);</div><div class="line">	System.out.println(<span class="string">"******"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">addCustomerThrowException() <span class="function">is running </span></div><div class="line"><span class="title">logAfterThrowing</span><span class="params">()</span> is running!</div><div class="line">hijacked : addCustomerThrowException</div><div class="line">Exception : java.lang.Exception: Generic Error</div><div class="line">******</div><div class="line">Exception in thread "main" java.lang.Exception: Generic Error</div><div class="line">	<span class="comment">//...</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="AspectJ-Around"><a href="#AspectJ-Around" class="headerlink" title="AspectJ @Around"></a>AspectJ @Around</h1><blockquote>
<p>在下面例子中，logAround()方法将在customerBo接口的addCustomerAround()方法执行之前执行， <strong>必须定义“joinYiibai.proceed();” 控制何时拦截器返回控制到原来的addCustomerAround()方法。</strong></p>
</blockquote>
<ul>
<li><p>File : LoggingAspect.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.aspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinYiibai;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="meta">@Around</span>(<span class="string">"execution(* com.yiibai.customer.bo.CustomerBo.addCustomerAround(..))"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAround</span><span class="params">(ProceedingJoinYiibai joinYiibai)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"logAround() is running!"</span>);</div><div class="line">	System.out.println(<span class="string">"hijacked method : "</span> + joinYiibai.getSignature().getName());</div><div class="line">	System.out.println(<span class="string">"hijacked arguments : "</span> + Arrays.toString(joinYiibai.getArgs()));</div><div class="line">		</div><div class="line">	System.out.println(<span class="string">"Around before is running!"</span>);</div><div class="line">	joinYiibai.proceed(); <span class="comment">//continue on the intercepted method</span></div><div class="line">	System.out.println(<span class="string">"Around after is running!"</span>);</div><div class="line">		</div><div class="line">	System.out.println(<span class="string">"******"</span>);</div><div class="line"></div><div class="line">   &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">logAround() is running!</div><div class="line">hijacked method : addCustomerAround</div><div class="line">hijacked arguments : [yiibai]</div><div class="line">Around before is running!</div><div class="line">addCustomerAround() is running, args : yiibai</div><div class="line">Around after is running!</div><div class="line">******</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;常见AspectJ的注解：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Before:&lt;/code&gt;方法执行前运行&lt;/li&gt;
&lt;li&gt;&lt;cod
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring表达式语言</title>
    <link href="https://super3h.me/2017/02/25/Spring%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E8%A8%80/"/>
    <id>https://super3h.me/2017/02/25/Spring表达式语言/</id>
    <published>2017-02-25T03:07:16.141Z</published>
    <updated>2017-02-25T05:13:40.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，<em>所有的Spring表达式都可以通过XML或注解。</em><br>在本教程中，我们将学习如何使用Spring表达式语言(SpEL)，注入字符串，整数，Bean到属性，无论是在XML和注释。</p>
</blockquote>
<h1 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring Beans"></a>Spring Beans</h1><blockquote>
<p>两个简单Bean，后来利用 SpEL 注入值到属性，在 XML 和 注释。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Item item;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String itemName;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> qty;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring-EL以XML形式"><a href="#Spring-EL以XML形式" class="headerlink" title="Spring EL以XML形式"></a>Spring EL以XML形式</h1><blockquote>
<p>使用 SpEL关闭的#{ SpEL expression }括号，请参阅XML bean定义文件下面的例子。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">	xsi:schemaLocation="http://www.springframework.org/schema/beans</div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;bean id="itemBean" class="com.yiibai.core.Item"&gt;</div><div class="line">		&lt;property name="name" value="itemA" /&gt;</div><div class="line">		&lt;property name="qty" value="10" /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id="customerBean" class="com.yiibai.core.Customer"&gt;</div><div class="line">		&lt;property name="item" value="#&#123;itemBean&#125;" /&gt;</div><div class="line">		&lt;property name="itemName" value="#&#123;itemBean.name&#125;" /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li><code>#{itemBean}</code>: 注入<code>“itemBean”</code>到<code>“customerBean”</code>Bean 的<code>“item”</code>属性。</li>
<li><code>#{itemBean.name}</code>: 注入<code>“itemBean”</code>的<code>“name”</code>属性到 <code>“customerBean&quot;</code>bean的<code>&quot;itemname”</code>属性。</li>
</ul>
<h1 id="Spring-EL以注解形式"><a href="#Spring-EL以注解形式" class="headerlink" title="Spring EL以注解形式"></a>Spring EL以注解形式</h1><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><blockquote>
<p>要在注解使用使用SpEL，<strong>必须通过注解注册您的组件。如果注册bean在XML和Java类中定义@Value，该@Value将无法执行。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"customerBean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;itemBean&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> Item item;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;itemBean.name&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> String itemName;</div><div class="line"></div><div class="line">	<span class="comment">//...</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"itemBean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"itemA"</span>) <span class="comment">//inject String directly</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"10"</span>) <span class="comment">//inject interger directly</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> qty;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>启用自动组件扫描。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai.core"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在注解模式下，可以使用<code>@Value</code>定义Spring EL。在这种情况下，一个String和Integer值直接注入到“itemBean”，之后又注入“itemBean”到“customerBean”属性。</p>
</blockquote>
<h2 id="执行输出"><a href="#执行输出" class="headerlink" title="执行输出"></a>执行输出</h2><blockquote>
<p>运行它，无论是使用 SpEL在XML 还是注释都显示了同样的结果：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line"></div><div class="line">	    Customer obj = (Customer) context.getBean(<span class="string">"customerBean"</span>);</div><div class="line">	    System.out.println(obj);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出结果<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Customer [item=Item [name=itemA, qty=<span class="number">10</span>], itemName=itemA]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="详细内容"><a href="#详细内容" class="headerlink" title="详细内容"></a>详细内容</h2><p><a href="http://www.yiibai.com/spring/spring-el-hello-world-example.html" target="_blank" rel="external">Spring EL hello world</a></p>
<h1 id="Spring-EL方法调用实例"><a href="#Spring-EL方法调用实例" class="headerlink" title="Spring EL方法调用实例"></a>Spring EL方法调用实例</h1><h2 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析"></a>代码解析</h2><blockquote>
<p>了解如何实现Spring EL方法调用与@Value注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"customerBean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;'yiibai'.toUpperCase()&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;priceBean.getSpecialPrice()&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> amount;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> amount;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.amount = amount;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Customer [name="</span> + name + <span class="string">", amount="</span> + amount + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"priceBean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Price</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSpecialPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Double(<span class="number">199.09</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Customer [name=YIIBAI, amount=<span class="number">199.09</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="详细内容-1"><a href="#详细内容-1" class="headerlink" title="详细内容"></a>详细内容</h2><p><a href="http://www.yiibai.com/spring/spring-el-method-invocation-example.html" target="_blank" rel="external">Spring EL方法调用实例</a></p>
<h1 id="Spring-EL运算符"><a href="#Spring-EL运算符" class="headerlink" title="Spring EL运算符"></a>Spring EL运算符</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Spring EL支持大多数标准的数学，逻辑和关系运算符。 例如，<ul>
<li><code>关系运算符:</code> 等于 (==, eq), 不等于 (!=, ne), 小于 (&lt;, lt), 小于或等于 (&lt;= , le), 大于 (&gt;, gt), 和大于或等于 (&gt;=, ge).</li>
<li><code>逻辑运算符:</code>且, 或, 非 (!).</li>
<li><code>数学运算符:</code>加法(+), 减法 (-), 乘法 (*), 除法(/), 除模(%) 和指数幂 (^).</li>
</ul>
</li>
</ul>
<h2 id="代码解析-2"><a href="#代码解析-2" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"customerBean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//Relational operators</span></div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 == 1&#125;"</span>) <span class="comment">//true</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testEqual;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 != 1&#125;"</span>) <span class="comment">//false</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testNotEqual;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 &lt; 1&#125;"</span>) <span class="comment">//false</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testLessThan;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 &lt;= 1&#125;"</span>) <span class="comment">//true</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testLessThanOrEqual;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 &gt; 1&#125;"</span>) <span class="comment">//false</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testGreaterThan;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 &gt;= 1&#125;"</span>) <span class="comment">//true</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testGreaterThanOrEqual;</div><div class="line"></div><div class="line">	<span class="comment">//Logical operators , numberBean.no == 999</span></div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;numberBean.no == 999 and numberBean.no &lt; 900&#125;"</span>) <span class="comment">//false</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testAnd;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;numberBean.no == 999 or numberBean.no &lt; 900&#125;"</span>) <span class="comment">//true</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testOr;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;!(numberBean.no == 999)&#125;"</span>) <span class="comment">//false</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> testNot;</div><div class="line"></div><div class="line">	<span class="comment">//Mathematical operators</span></div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 + 1&#125;"</span>) <span class="comment">//2.0</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> testAdd;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;'1' + '@' + '1'&#125;"</span>) <span class="comment">//1@1</span></div><div class="line">	<span class="keyword">private</span> String testAddString;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 - 1&#125;"</span>) <span class="comment">//0.0</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> testSubtraction;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;1 * 1&#125;"</span>) <span class="comment">//1.0</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> testMultiplication;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;10 / 2&#125;"</span>) <span class="comment">//5.0</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> testDivision;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;10 % 10&#125;"</span>) <span class="comment">//0.0</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> testModulus ;</div><div class="line">	</div><div class="line">	<span class="meta">@Value</span>(<span class="string">"#&#123;2 ^ 2&#125;"</span>) <span class="comment">//4.0</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> testExponentialPower;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Customer [testEqual="</span> + testEqual + <span class="string">", testNotEqual="</span></div><div class="line">				+ testNotEqual + <span class="string">", testLessThan="</span> + testLessThan</div><div class="line">				+ <span class="string">", testLessThanOrEqual="</span> + testLessThanOrEqual</div><div class="line">				+ <span class="string">", testGreaterThan="</span> + testGreaterThan</div><div class="line">				+ <span class="string">", testGreaterThanOrEqual="</span> + testGreaterThanOrEqual</div><div class="line">				+ <span class="string">", testAnd="</span> + testAnd + <span class="string">", testOr="</span> + testOr + <span class="string">", testNot="</span></div><div class="line">				+ testNot + <span class="string">", testAdd="</span> + testAdd + <span class="string">", testAddString="</span></div><div class="line">				+ testAddString + <span class="string">", testSubtraction="</span> + testSubtraction</div><div class="line">				+ <span class="string">", testMultiplication="</span> + testMultiplication</div><div class="line">				+ <span class="string">", testDivision="</span> + testDivision + <span class="string">", testModulus="</span></div><div class="line">				+ testModulus + <span class="string">", testExponentialPower="</span></div><div class="line">				+ testExponentialPower + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="详情链接"><a href="#详情链接" class="headerlink" title="详情链接"></a>详情链接</h2><p><a href="http://www.yiibai.com/spring/spring-el-operators-example.html" target="_blank" rel="external">Spring EL运算符实例</a></p>
<h1 id="更多详情内容"><a href="#更多详情内容" class="headerlink" title="更多详情内容"></a>更多详情内容</h1><p><a href="http://www.yiibai.com/spring/spring-el-lists-maps-example.html" target="_blank" rel="external">Spring EL Lists,Maps实例</a><br><a href="http://www.yiibai.com/spring/spring-el-regular-expression-example.html" target="_blank" rel="external">Spring EL正则表达式实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring EL与OGNL和JSF EL相似，计算评估或在bean创建时执行。此外，&lt;em&gt;所有的Spring表
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring自动扫描组件</title>
    <link href="https://super3h.me/2017/02/25/Spring%E8%87%AA%E5%8A%A8%E6%89%AB%E6%8F%8F%E7%BB%84%E4%BB%B6/"/>
    <id>https://super3h.me/2017/02/25/Spring自动扫描组件/</id>
    <published>2017-02-25T02:35:10.542Z</published>
    <updated>2017-02-25T03:06:22.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动组件扫描"><a href="#自动组件扫描" class="headerlink" title="自动组件扫描"></a>自动组件扫描</h1><blockquote>
<p>启用Spring组件扫描功能。<br>使用@Component注释来表示这是类是一个自动扫描组件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello , This is CustomerDAO"</span>;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"><span class="comment">//DAO层，添加@Component，表明这也是一个自动扫描组件。</span></div><div class="line"><span class="keyword">package</span> com.yiibai.customer.services;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.yiibai.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CustomerService [customerDAO="</span> + customerDAO + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>将这个<code>“context:component”</code>在bean配置文件，这意味着，在 Spring 中启用自动扫描功能。<code>base-package</code> 是指明存储组件，Spring将扫描该文件夹，并找出Bean(注解为@Component)并注册到 Spring 容器。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai.customer"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>执行:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.yiibai.customer.services.CustomerService;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    	   <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"Spring-AutoScan.xml"</span>&#125;);</div><div class="line"></div><div class="line">    	CustomerService cust = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</div><div class="line">    	System.out.println(cust);</div><div class="line">    	</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService [customerDAO=Hello , This is CustomerDAO]</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="自定义自动扫描组件名称"><a href="#自定义自动扫描组件名称" class="headerlink" title="自定义自动扫描组件名称"></a>自定义自动扫描组件名称</h1><ul>
<li><p>默认情况下，Spring 将小写部件的第一字符 从’CustomerService’到’customerService’。可以检索该组件名称为“customerService”。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>要创建组件的自定义名称，你可以这样自定义名称：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"AAA"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>现在，可以用’AAA’这个名称进行检索。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomerService cust = (CustomerService)context.getBean(<span class="string">"AAA"</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="自动组件扫描注释类型"><a href="#自动组件扫描注释类型" class="headerlink" title="自动组件扫描注释类型"></a>自动组件扫描注释类型</h1><ul>
<li>在Spring2.5中，有4种类型的组件自动扫描注释类型<ul>
<li><code>@Component</code> – 指示自动扫描组件。</li>
<li><code>@Repository</code> – 表示在持久层DAO组件。</li>
<li><code>@Service</code> – 表示在业务层服务组件。</li>
<li><code>@Controller</code> – 表示在表示层控制器组件。<blockquote>
<p>因此，使用哪一个？其实并不那么重要。参见 @Repository，@Service 或 @Controller 源代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>你可能会发现，<em>所有的 @Repository, @Service 或 @Controller 被注解为 @Component。</em>因此<font color="#008AE2">，我们可以只使用 @Component 对所有组件进行自动扫描？是的，Spring会自动扫描所有组件的 @Component 注解。</font><br>它工作正常，但不是一个好的做法，为便于阅读，应该始终声明<code>@Repository，@ Service 或 @Controller</code> 在指定的层，使你的代码更易于阅读，如下：</p>
<ul>
<li>DAO 层<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello , This is CustomerDAO"</span>;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li>Service 层<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.services;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.yiibai.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CustomerService [customerDAO="</span> + customerDAO + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Spring过滤器组件自动扫描"><a href="#Spring过滤器组件自动扫描" class="headerlink" title="Spring过滤器组件自动扫描"></a>Spring过滤器组件自动扫描</h1><h2 id="过滤组件-包含"><a href="#过滤组件-包含" class="headerlink" title="过滤组件 - 包含"></a>过滤组件 - 包含</h2><blockquote>
<p>参见下面的例子中使用Spring “过滤” 扫描并注册匹配定义<code>“regex”</code>，<em>即使该类组件的名称未标注 @Component 。</em></p>
<ul>
<li>DAO 层<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.dao;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello , This is CustomerDAO"</span>;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li><p>Service 层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.services;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> com.yiibai.customer.dao.CustomerDAO;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	CustomerDAO customerDAO;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CustomerService [customerDAO="</span> + customerDAO + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Spring 过滤</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai"</span> &gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> </span></div><div class="line">                       <span class="attr">expression</span>=<span class="string">"com.yiibai.customer.dao.*DAO.*"</span> /&gt;</div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> </span></div><div class="line">                       <span class="attr">expression</span>=<span class="string">"com.yiibai.customer.services.*Service.*"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.yiibai.customer.services.CustomerService;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">		<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"Spring-AutoScan.xml"</span>&#125;);</div><div class="line"></div><div class="line">    	CustomerService cust = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</div><div class="line">    	System.out.println(cust);</div><div class="line">    	</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line">CustomerService [customerDAO=Hello , This is CustomerDAO]</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>在这个XML过滤中，所有文件的名称中包含 DAO 或 Service(<em>DAO.</em>, <em>Services.</em>) 单词将被检测并在 Spring 容器中注册。</p>
</blockquote>
<h2 id="过滤组件-不包含"><a href="#过滤组件-不包含" class="headerlink" title="过滤组件 - 不包含"></a>过滤组件 - 不包含</h2><blockquote>
<p>另外，<em>您还可以排除指定组件，以避免 Spring 检测和 Spring 容器注册。</em><font color="red">不包括在这些文件中标注有 @Service 。</font><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai.customer"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span> /&gt;		</div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>不包括那些包含DAO这个词组文件名。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> </span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"com.yiibai.customer.dao.*DAO.*"</span> /&gt;		</div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://www.yiibai.com/spring/spring-auto-scanning-components.html" target="_blank" rel="external">Spring自动扫描组件</a><br><a href="http://www.yiibai.com/spring/spring-filtering-components-in-auto-scanning.html" target="_blank" rel="external">Spring过滤器组件自动扫描</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自动组件扫描&quot;&gt;&lt;a href=&quot;#自动组件扫描&quot; class=&quot;headerlink&quot; title=&quot;自动组件扫描&quot;&gt;&lt;/a&gt;自动组件扫描&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;启用Spring组件扫描功能。&lt;br&gt;使用@Component注释来表示这是类是一
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>spring-xmlns,xmlns:xsi和xsi:schemaLocation</title>
    <link href="https://super3h.me/2017/02/24/spring-xmlns,xmlns%20xsi%E5%92%8Cxsi%20schemaLocation/"/>
    <id>https://super3h.me/2017/02/24/spring-xmlns,xmlns xsi和xsi schemaLocation/</id>
    <published>2017-02-24T12:13:43.477Z</published>
    <updated>2017-02-24T12:46:14.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p><em>相信很多人和我一样，在编写Spring或者Maven或者其他需要用到XML文档的程序时，通常都是将这些XML文档头拷贝过来，并没有理解其中元素（比 如xmlns，xmlns:xsi，xsi:schemaLocation）的真正含义，不知道哪些元素是多余的，也不知道为什么要加那些元素。这样当有 时候网上Copy的XML头有错的时候自己却不知道怎么下手。我也是这样的，于是今天花了点时间好好的理解了一下这些元素及其用法，现整理与此。</em></p>
</blockquote>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><blockquote>
<p>话不多说，先来一段Spring的XML样本，相信大家都很眼熟：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">                           http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">                           http://www.springframework.org/schema/context </div><div class="line">                           http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">                           http://www.springframework.org/schema/mvc</div><div class="line">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line">                           </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xxx.xxx.controller"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxx"</span> <span class="attr">class</span>=<span class="string">"xxx.xxx.xxx.Xxx"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这 个文档中，根元素<beans>就不用说了，接下来是xmlns。那么什么是xmlns呢？<font color="#FF899C">xmlns其实是XML Namespace的缩写，可译为“XML命名空间”，但个人觉得，翻译后的名字反而不好理解，所以我们就叫它为XML Namespace吧。</font></beans></p>
</blockquote>
<h1 id="为什么需要xmlns？"><a href="#为什么需要xmlns？" class="headerlink" title="为什么需要xmlns？"></a>为什么需要xmlns？</h1><blockquote>
<p>考虑这样两个XML文档：表示HTML表格元素的<code>&lt;table/&gt;</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>和描述一张桌子的<code>&lt;table/&gt;</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>African Coffee Table<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">width</span>&gt;</span>80<span class="tag">&lt;/<span class="name">width</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">length</span>&gt;</span>120<span class="tag">&lt;/<span class="name">length</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>假如这两个 XML 文档被一起使用，由于两个文档都包含带有不同内容和定义的 <code>&lt;table&gt;</code>元素，就会发生命名冲突。XML 解析器是无法确定如何处理这类冲突。为了解决上述问题，xmlns就产生了。</em></p>
</blockquote>
<h1 id="如何是用xmlns？"><a href="#如何是用xmlns？" class="headerlink" title="如何是用xmlns？"></a>如何是用xmlns？</h1><blockquote>
<p>很简单，使用语法：<code>xmlns:namespace-prefix=&quot;namespaceURI&quot;</code>。其中<font color="#42CA98">namespace-prefix为自定义前缀，只要在这个XML文档中保证前缀不重复即可；namespaceURI是这个前缀对应的XML Namespace的定义。</font>例如，<br><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div></pre></td></tr></table></figure></p>
<p>这一句定义了一个<a href="http://www.springframwork.org/schema/context的Namespace（这和Java类中的包的声明很相似），并将其和前缀context绑定。所以上面的Spring" target="_blank" rel="external">http://www.springframwork.org/schema/context的Namespace（这和Java类中的包的声明很相似），并将其和前缀context绑定。所以上面的Spring</a> XML文档中会有这么一句：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xxx.xxx.controller"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<font color="#42CA98">这里的<component-scan>元素就来自别名为context的XML Namespace，也就是在<a href="http://www.springframework.org/schema/context中定义的。" target="_blank" rel="external">http://www.springframework.org/schema/context中定义的。</a></component-scan></font>

</blockquote>
<ul>
<li>我们还可以将前缀定义为abc：<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:abc=<span class="string">"namespaceURI"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>这样再使用这个namespaceURI中的元素时，需要以abc为前缀，例如：<code>&lt;abc:xxx/&gt;</code>。再拿上面的例子解释怎么使用xmlns：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 这里xmlns:h="url1"表示这个table是用h作为标记，table的写法在url1中定义 --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h:table</span> <span class="attr">xmlns:h</span>=<span class="string">"url1"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">h:tr</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">h:td</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">h:td</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">h:td</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">h:td</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">h:tr</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">h:table</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 这里xmlns:f="url2"表示这个table是用f作为标记，table的写法在url2中定义 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">f:table</span> <span class="attr">xmlns:f</span>=<span class="string">"url2"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">f:name</span>&gt;</span>African Coffee Table<span class="tag">&lt;/<span class="name">f:name</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">f:width</span>&gt;</span>80<span class="tag">&lt;/<span class="name">f:width</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">f:length</span>&gt;</span>120<span class="tag">&lt;/<span class="name">f:length</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">f:table</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><font color="#7030A0">后者与前者仅仅使用不同前缀，我们为<code>&lt;table&gt;</code>标签添加了一个 xmlns 属性，这样就为前缀赋予了一个与某个命名空间相关联的限定名称。</font>此时再把它们放在一起，XML解析器就不会报错了。</p>
</blockquote>
<h1 id="xmlns和xmlns-xsi有什么不同？"><a href="#xmlns和xmlns-xsi有什么不同？" class="headerlink" title="xmlns和xmlns:xsi有什么不同？"></a>xmlns和xmlns:xsi有什么不同？</h1><ul>
<li>xmlns表示默认的Namespace。例如Spring XML文档中的:<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns="http://www.springframework.org/schema/beans"</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>这一句表示该文档默认的XML Namespace为<a href="http://www.springframwork.org/schema/beans。" target="_blank" rel="external">http://www.springframwork.org/schema/beans。</a><font color="#7030A0">对于默认的Namespace中的元素，可以不使用前缀。</font>例如Spring XML文档中的<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxx"</span> <span class="attr">class</span>=<span class="string">"xxx.xxx.xxx.Xxx"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>xmlns:xsi表示使用xsi作为前缀的Namespace，当然前缀xsi需要在文档中声明。</p>
</blockquote>
<h1 id="xsi-schemaLocation有何作用？"><a href="#xsi-schemaLocation有何作用？" class="headerlink" title="xsi:schemaLocation有何作用？"></a>xsi:schemaLocation有何作用？</h1><ul>
<li><p><code>xsi:schemaLocation</code>属性其实是Namespace为<a href="http://www.w3.org/2001/XMLSchema-instance里的schemaLocation属性，正是因为我们一开始声明了" target="_blank" rel="external">http://www.w3.org/2001/XMLSchema-instance里的schemaLocation属性，正是因为我们一开始声明了</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div></pre></td></tr></table></figure>
</li>
<li><p>这里才写作xsi:schemaLocation（当然一般都使用这个前缀）。<font color="#EA623C">它定义了XML Namespace和对应的 XSD（Xml Schema Definition）文档的位置的关系。它的值由一个或多个URI引用对组成，两个URI之间以空白符分隔（空格和换行均可）。第一个URI是定义的 XML Namespace的值，第二个URI给出Schema文档的位置，Schema处理器将从这个位置读取Schema文档，该文档的targetNamespace必须与第一个URI相匹配。</font>例如：</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/context </span></div><div class="line">                    http://www.springframework.org/schema/context/spring-context.xsd"</div></pre></td></tr></table></figure>
</li>
<li><p>这里表示Namespace为<code>http://www.springframework.org/schema/context</code>的Schema的位置为<a href="http://www.springframework.org/schema/context/spring-context.xsd。" target="_blank" rel="external">http://www.springframework.org/schema/context/spring-context.xsd</a>这里我们可以打开这个Schema的位置，下面是这个文档的开始部分：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:schema xmlns="http://www.springframework.org/schema/context" </div><div class="line">            xmlns:xsd="http://www.w3.org/2001/XMLSchema" </div><div class="line">            xmlns:beans="http://www.springframework.org/schema/beans" </div><div class="line">            xmlns:tool="http://www.springframework.org/schema/tool" </div><div class="line">            &lt;!-- 这里的targetNamespace和上方xsi:schemaLocation中的第一个URI匹配 --&gt; </div><div class="line">            targetNamespace="http://www.springframework.org/schema/context" </div><div class="line">            elementFormDefault="qualified" </div><div class="line">            attributeFormDefault="unqualified"&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>有了上面的说明后，再去理解开始的Spring XML文档，一定会有不一样的感觉！ </p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://www.cnblogs.com/zhao1949/p/5652167.html" target="_blank" rel="external">关于XML文档的xmlns、xmlns:xsi和xsi:schemaLocation </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;相信很多人和我一样，在编写Spring或者Maven或者其他需要用到XML文档的程序时，通常都是将这些XM
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring使用@Autowired注解自动装配</title>
    <link href="https://super3h.me/2017/02/24/Spring%E4%BD%BF%E7%94%A8@Autowired%E6%B3%A8%E8%A7%A3%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>https://super3h.me/2017/02/24/Spring使用@Autowired注解自动装配/</id>
    <published>2017-02-24T11:09:22.924Z</published>
    <updated>2017-02-24T11:23:35.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>在大多数情况下，你可能只需要在特定的 bean 自动装配属性。<br>在Spring中，<em>可以使用 @Autowired 注解通过setter方法，构造函数或字段自动装配Bean。</em>此外，它可以在一个特定的bean属性自动装配。<br><code>注意:</code><strong>@Autowired注解是通过匹配数据类型自动装配Bean</strong></p>
</blockquote>
<h1 id="Beans"><a href="#Beans" class="headerlink" title="Beans"></a>Beans</h1><blockquote>
<p>一个 Customer bean 在bean配置文件中声明。稍后，您将使用 “@Autowired” 来自动装配一个Person bean。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.yiibai.common;</div><div class="line"></div><div class="line">public class Customer </div><div class="line">&#123;</div><div class="line">	//you want autowired this field.</div><div class="line">	private Person person;</div><div class="line">	</div><div class="line">	private int type;</div><div class="line">	private String action;</div><div class="line">	</div><div class="line">	//getter and setter method</div><div class="line">	</div><div class="line">&#125;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">        xsi:schemaLocation="http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;bean id="CustomerBean" class="com.yiibai.common.Customer"&gt;</div><div class="line">		&lt;property name="action" value="buy" /&gt;</div><div class="line">		&lt;property name="type" value="1" /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id="PersonBean" class="com.yiibai.common.Person"&gt;</div><div class="line">		&lt;property name="name" value="yiibai" /&gt;</div><div class="line">		&lt;property name="address" value="address 123" /&gt;</div><div class="line">		&lt;property name="age" value="28" /&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="注册AutowiredAnnotationBeanPostProcessor"><a href="#注册AutowiredAnnotationBeanPostProcessor" class="headerlink" title="注册AutowiredAnnotationBeanPostProcessor"></a>注册AutowiredAnnotationBeanPostProcessor</h1><blockquote>
<p>要启用@Autowired，必须注册“AutowiredAnnotationBeanPostProcessor’，你可以用两种方式做到这一点：</p>
</blockquote>
<h2 id="Include"><a href="#Include" class="headerlink" title="Include "></a>Include <context:annotation-config></context:annotation-config></h2><blockquote>
<p>添加 Spring 上下文和<code>&lt;context:annotation-config /&gt;</code>在bean配置文件中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yiibai"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address ABC"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"29"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><context:annotation-config> 是用于激活那些已经在spring容器里注册过的bean（<em>无论是通过xml的方式还是通过package sanning的方式</em>）上面的注解。<br><code>注意:</code><context:component-scan>除了具有<context:annotation-config>的功能之外，<context:component-scan>还可以在指定的package下扫描以及注册javabean 。</context:component-scan></context:annotation-config></context:component-scan></context:annotation-config></p>
</blockquote>
<h2 id="包含-AutowiredAnnotationBeanPostProcessor"><a href="#包含-AutowiredAnnotationBeanPostProcessor" class="headerlink" title="包含 AutowiredAnnotationBeanPostProcessor"></a>包含 AutowiredAnnotationBeanPostProcessor</h2><blockquote>
<p>直接在bean配置文件包含“AutowiredAnnotationBeanPostProcessor”。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> </span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"</span>/&gt;</div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yiibai"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address ABC"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"29"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Autowired示例"><a href="#Autowired示例" class="headerlink" title="@Autowired示例"></a>@Autowired示例</h2><blockquote>
<p>现在，你可以通过 @Autowired 自动装配 bean，它可以在 setter 方法，构造函数或字段中使用。</p>
</blockquote>
<h3 id="Autowired-setter-方法"><a href="#Autowired-setter-方法" class="headerlink" title="@Autowired setter 方法"></a>@Autowired setter 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">private</span> String action;</div><div class="line">	<span class="comment">//getter and setter methods</span></div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.person = person;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Autowired-构造方法"><a href="#Autowired-构造方法" class="headerlink" title="@Autowired 构造方法"></a>@Autowired 构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">private</span> String action;</div><div class="line">	<span class="comment">//getter and setter methods</span></div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.person = person;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Autowired-字段"><a href="#Autowired-字段" class="headerlink" title="@Autowired 字段"></a>@Autowired 字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">private</span> String action;</div><div class="line">	<span class="comment">//getter and setter methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面的例子会自动装配“PersonBean”到Customer的person属性。<br>执行它<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    	  <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"applicationContext.xml"</span>&#125;);</div><div class="line">    	</div><div class="line">    	Customer cust = (Customer)context.getBean(<span class="string">"CustomerBean"</span>);</div><div class="line">    	System.out.println(cust);</div><div class="line">    	</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Customer [person=Person [name=YiibaiA], type=1, action=buy]</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="依赖检查"><a href="#依赖检查" class="headerlink" title="依赖检查"></a>依赖检查</h1><blockquote>
<p>默认情况下，@Autowired将执行相关检查，以确保属性已经装配正常。当Spring无法找到匹配的Bean装配，它会抛出异常。要解决这个问题，可以通过 <strong>@Autowired 的“required”属性设置为false来禁用此检查功能。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">private</span> String action;</div><div class="line">	<span class="comment">//getter and setter methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，如果Spring不能找到一个匹配的Bean，person属性将不设定。</p>
</blockquote>
<h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><blockquote>
<p>@Qualifier注解我们用来控制bean应在字段上自动装配。例如，具有两个类似的 person bean 配置文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean1"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yiibai-1"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address-1"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"29"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonBean2"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yiibai-2"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"address-2"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Spring知道哪个 bean 应当装配？<br>为了解决这个问题，可以使用 @Qualifier 自动装配一个特定的 bean，例如，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"PersonBean1"</span>)</div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">private</span> String action;</div><div class="line">	<span class="comment">//getter and setter methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这意味着，“PersonBean1” bean被自动装配到customer的person属性</p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://www.yiibai.com/spring/spring-auto-wiring-beans-with-autowired-annotation.html" target="_blank" rel="external">Spring使用@Autowired注解自动装配</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在大多数情况下，你可能只需要在特定的 bean 自动装配属性。&lt;br&gt;在Spring中，&lt;em&gt;可以使用 @Aut
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Bean作用域实例</title>
    <link href="https://super3h.me/2017/02/24/Spring%20Bean%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AE%9E%E4%BE%8B/"/>
    <id>https://super3h.me/2017/02/24/Spring Bean作用域实例/</id>
    <published>2017-02-24T10:47:03.231Z</published>
    <updated>2017-02-24T10:57:56.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域：<ul>
<li><code>单例：</code> 每个Spring IoC 容器返回一个bean实例</li>
<li><code>原型：</code>当每次请求时返回一个新的bean实例</li>
<li><code>请求：</code>返回每个HTTP请求的一个Bean实例</li>
<li><code>会话：</code>返回每个HTTP会话的一个bean实例</li>
<li><code>全局会话：</code>返回全局HTTP会话的一个bean实例<blockquote>
<p>在大多数情况下，可能只处理了 Spring 的核心作用域 - 单例和原型，默认作用域是单例。<br>注：<strong>意味着只有在一个基于web的Spring ApplicationContext情形下有效！</strong></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="单例VS原型"><a href="#单例VS原型" class="headerlink" title="单例VS原型"></a>单例VS原型</h1><blockquote>
<p>这里有一个例子来说明，bean的作用域单例和原型之间的不同：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.services;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></div><div class="line">&#123;</div><div class="line">	String message;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.message = message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="单例例子"><a href="#单例例子" class="headerlink" title="单例例子"></a>单例例子</h2><blockquote>
<p>如果 bean 配置文件中没有指定 bean 的范围，默认为单例。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;</div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> </span></div><div class="line">            <span class="attr">class</span>=<span class="string">"com.yiibai.customer.services.CustomerService"</span> /&gt;</div><div class="line">		</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.yiibai.customer.services.CustomerService;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    	 <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"Spring-Customer.xml"</span>&#125;);</div><div class="line"></div><div class="line">    	CustomerService custA = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</div><div class="line">    	custA.setMessage(<span class="string">"Message by custA"</span>);</div><div class="line">    	System.out.println(<span class="string">"Message : "</span> + custA.getMessage());</div><div class="line">    	</div><div class="line">    	<span class="comment">//retrieve it again</span></div><div class="line">    	CustomerService custB = (CustomerService)context.getBean(<span class="string">"customerService"</span>);</div><div class="line">    	System.out.println(<span class="string">"Message : "</span> + custB.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message : Message by custA</div><div class="line">Message : Message by custA</div></pre></td></tr></table></figure></p>
<p>由于 <strong>bean 的 “CustomerService’ 是单例作用域，第二个通过提取”custB“将显示消息由 ”custA’ 设置，即使它是由一个新的 getBean()方法来提取。</strong>在单例中，<strong><em>每个Spring IoC容器只有一个实例，无论多少次调用 getBean()方法获取它，它总是返回同一个实例。</em></strong></p>
</blockquote>
<h2 id="原型例子"><a href="#原型例子" class="headerlink" title="原型例子"></a>原型例子</h2><blockquote>
<p>如果想有一个新的 “CustomerService”bean 实例，每次调用它的时候，需要使用原型(prototype)来代替。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.customer.services.CustomerService"</span> </span></div><div class="line">         <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</div><div class="line">		</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行-执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message : Message by custA</div><div class="line">Message : null</div></pre></td></tr></table></figure></p>
<p>在原型作用域，必须为每个 getBean()方法中调用返回一个新的实例。</p>
</blockquote>
<h1 id="Bean作用域注释"><a href="#Bean作用域注释" class="headerlink" title="Bean作用域注释"></a>Bean作用域注释</h1><blockquote>
<p>还可以使用注释来定义 bean 的作用域。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.customer.services;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span></div><div class="line">&#123;</div><div class="line">	String message;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.message = message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启用自动组件扫描<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</div><div class="line">	http://www.springframework.org/schema/context</div><div class="line">	http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai.customer"</span> /&gt;</span></div><div class="line">		</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="原文详解"><a href="#原文详解" class="headerlink" title="原文详解"></a>原文详解</h1><p><a href="http://www.yiibai.com/spring/spring-bean-scopes-examples.html#" target="_blank" rel="external">Spring Bean作用域实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Spring中，bean作用域用于确定哪种类型的 bean 实例应该从Spring容器中返回给调用者。bean支持的5种范围域
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring 依赖注入(DI)</title>
    <link href="https://super3h.me/2017/02/24/Spring%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5(DI)/"/>
    <id>https://super3h.me/2017/02/24/Spring 依赖注入(DI)/</id>
    <published>2017-02-24T05:09:01.266Z</published>
    <updated>2017-02-24T05:27:12.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在Spring框架中，依赖注入(DI)的设计模式是用来定义对象彼此间的依赖。它主要有两种类型：</p>
<pre><code>- Setter方法注入
- 构造器注入
</code></pre><p>这里两种方法共用的基本类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Music</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">minYao</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.core.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.core.Music;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicImpl</span> <span class="keyword">implements</span> <span class="title">Music</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">minYao</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"民谣"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Setter方法注入"><a href="#Setter方法注入" class="headerlink" title="Setter方法注入"></a>Setter方法注入</h1><blockquote>
<p>这是最流行最简单的DI注入方法，通过设置方法注入依赖。</p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote>
<p>帮助器类和指定的setter方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.helper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.core.Music;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicHelper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Music music;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMusic</span><span class="params">()</span> </span>&#123;</div><div class="line">		music.minYao();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusic</span><span class="params">(Music music)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.music = music;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个 bean 配置文件用来声明bean 和通过 setter 设置注入(property标签)的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"music"</span> <span class="attr">class</span>=<span class="string">"com.hhh.core.impl.MusicImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"musicHelper"</span> <span class="attr">class</span>=<span class="string">"com.hhh.helper.MusicHelper"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"music"</span> <span class="attr">ref</span>=<span class="string">"music"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试类test<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.helper.MusicHelper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDI</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetter</span><span class="params">()</span></span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		MusicHelper helper = (MusicHelper) context.getBean(<span class="string">"musicHelper"</span>);</div><div class="line">		helper.getMusic();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果:<code>民谣</code></p>
</blockquote>
<h1 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h1><blockquote>
<p>此DI方法将通过构造函数注入依赖。</p>
</blockquote>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><blockquote>
<p>一个辅助类的构造函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.helper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.core.Music;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorHelper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConstructorHelper</span><span class="params">(Music music)</span></span>&#123;</div><div class="line">		music.minYao();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>bean 配置文件来声明bean并通过构造函数(constructor-arg标签)设置注入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"music"</span> <span class="attr">class</span>=<span class="string">"com.hhh.core.impl.MusicImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"constructorHelper"</span> <span class="attr">class</span>=<span class="string">"com.hhh.helper.ConstructorHelper"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"music"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试类test<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.helper.MusicHelper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDI</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor</span><span class="params">()</span></span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		MusicHelper helper = (MusicHelper) context.getBean(<span class="string">"musicHelper"</span>);</div><div class="line">		helper.getMusic();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果:<code>民谣</code></p>
</blockquote>
<h2 id="构造方法注入类型歧义问题"><a href="#构造方法注入类型歧义问题" class="headerlink" title="构造方法注入类型歧义问题"></a>构造方法注入类型歧义问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote>
<p>让我们来看看这个客户 bean 实例。它包含两个构造方法，均接受3个不同的数据类型参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String address;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, String address, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.address = address;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> age, String address)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">		<span class="keyword">this</span>.address = address;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//getter and setter methods</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">" name : "</span> +name + <span class="string">"\n address : "</span></div><div class="line">               + address + <span class="string">"\n age : "</span> + age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>Spring bean</code> 的配置文件中，通过传递一个“yiibai’ 的名字，地址为’188’，以及年龄为’28’<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--Spring-Customer.xml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>yiibai<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>188<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>28<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行它，你期望的结果是什么？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiibai.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></div><div class="line">    &#123;</div><div class="line">    	ApplicationContext context = </div><div class="line">    	  <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"Spring-Customer.xml"</span>&#125;);</div><div class="line"></div><div class="line">    	Customer cust = (Customer)context.getBean(<span class="string">"CustomerBean"</span>);</div><div class="line">    	System.out.println(cust);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name : yiibai</div><div class="line"> address : 28</div><div class="line"> age : 188</div></pre></td></tr></table></figure></p>
<p>其结果不是我们所期望的，第一个构造器不执行，而是第二构造函数运行。在Spring参数类型’188’ 能够转换成int，所以Spring只是转换它，并采用第二个构造来执行，即使你认为它应该是一个字符串。</p>
</blockquote>
<ul>
<li>另外，如果Spring不能解决使用哪个构造函数，它会提示以下错误信息<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">constructor arguments specified but no matching constructor </div><div class="line">found in bean <span class="string">'CustomerBean'</span> (hint: specify index and/or </div><div class="line">type arguments <span class="keyword">for</span> simple parameters to avoid type ambiguities)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span>&gt;</span></div><div class="line">	</div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>yiibai<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>188<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>28<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>再次运行它，现在得到你所期望的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name : yiibai</div><div class="line"> address : 188</div><div class="line"> age : 28</div></pre></td></tr></table></figure></p>
<p>这是一个很好的做法，显式声明每个构造函数参数的数据类型，以避免上述构造注入型歧义的问题。</p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://www.yiibai.com/spring/constructor-injection-type-ambiguities-in-spring.html" target="_blank" rel="external">Spring构造方法注入类型歧义</a><br><a href="http://www.yiibai.com/spring/spring-dependency-injection-di.html" target="_blank" rel="external">Spring依赖注入（DI）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Spring框架中，依赖注入(DI)的设计模式是用来定义对象彼此间的依赖。它主要有两种类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Setter方法注入
- 构造器注入
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里两种方法共用的基本类如下:&lt;br&gt;&lt;figu
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>spring所遇问题</title>
    <link href="https://super3h.me/2017/02/23/spring%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98/"/>
    <id>https://super3h.me/2017/02/23/spring所遇问题/</id>
    <published>2017-02-23T13:44:21.080Z</published>
    <updated>2017-02-23T13:50:47.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jar包没导出的问题"><a href="#jar包没导出的问题" class="headerlink" title="jar包没导出的问题"></a>jar包没导出的问题</h1><blockquote>
<p>没导入<code>spring-core-4.2.6.RELEASE.jar</code>，报:<code>The type org.springframework.core.NestedRuntimeException cannot be resolved. It is indirectly referenced from required .class files</code><br>以及其他jar包没导报:<code>ClassNoFoundException....</code>，以下列出所需基本包<br><img src="/2017/02/23/spring所遇问题/1.png" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jar包没导出的问题&quot;&gt;&lt;a href=&quot;#jar包没导出的问题&quot; class=&quot;headerlink&quot; title=&quot;jar包没导出的问题&quot;&gt;&lt;/a&gt;jar包没导出的问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;没导入&lt;code&gt;spring-core-4.2.
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring JavaConfig</title>
    <link href="https://super3h.me/2017/02/23/Spring%20JavaConfig/"/>
    <id>https://super3h.me/2017/02/23/Spring JavaConfig/</id>
    <published>2017-02-23T12:54:19.177Z</published>
    <updated>2017-02-23T13:17:39.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解替代"><a href="#注解替代" class="headerlink" title="注解替代"></a>注解替代</h1><blockquote>
<p>从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义和在Spring配置XML文件到Java类中。<br>但是，<em>仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。</em><br>看来看经典的XML定义和JavaConfig的不同，如下定义在Spring容器中的bean<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;</div><div class="line"> </div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloBean"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.hello.impl.HelloWorldImpl"</span>&gt;</span></div><div class="line">		</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>等效于以下JavaConfig的配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> com.yiibai.hello.HelloWorld;</div><div class="line"><span class="keyword">import</span> com.yiibai.hello.impl.HelloWorldImpl;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span>(name=<span class="string">"helloBean"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> HelloWorld <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloWorldImpl();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="目录及所需jar包"><a href="#目录及所需jar包" class="headerlink" title="目录及所需jar包"></a>目录及所需jar包</h2><p><img src="/2017/02/23/Spring JavaConfig/1.png" alt=""></p>
<h2 id="单个加载"><a href="#单个加载" class="headerlink" title="单个加载"></a>单个加载</h2><h3 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring Beans"></a>Spring Beans</h3><blockquote>
<p>一个简单的Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.helloWorld;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.helloWorld.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.helloWorld.HelloWorld;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"hello world"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Configuration示例"><a href="#Configuration示例" class="headerlink" title="@Configuration示例"></a>@Configuration示例</h3><blockquote>
<p>使用 <code>@Configuration</code> 注释告诉 Spring，这是核心的 Spring 配置文件，并通过 <code>@Bean</code> 定义 bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.appconfig;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.helloWorld.HelloWorld;</div><div class="line"><span class="keyword">import</span> com.hhh.helloWorld.impl.HelloWorldImpl;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span>(name=<span class="string">"helloWorld"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> HelloWorld <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HelloWorldImpl();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="执行程序"><a href="#执行程序" class="headerlink" title="执行程序"></a>执行程序</h3><blockquote>
<p>使用<code>AnnotationConfigApplicationContext</code> 加载您的JavaConfig类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.appconfig.AppConfig;</div><div class="line"><span class="keyword">import</span> com.hhh.appconfig.AppConfig2;</div><div class="line"><span class="keyword">import</span> com.hhh.core.CustomerBo;</div><div class="line"><span class="keyword">import</span> com.hhh.core.SchedulerBo;</div><div class="line"><span class="keyword">import</span> com.hhh.helloWorld.HelloWorld;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="comment">//spring通过注解拿到HelloWorld对象</span></div><div class="line">		ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</div><div class="line">		HelloWorld hello = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</div><div class="line">		hello.sayHello();</div><div class="line">		<span class="comment">//通过new而得到的对象</span></div><div class="line">		AppConfig config = <span class="keyword">new</span> AppConfig();</div><div class="line">		HelloWorld world = config.helloWorld();</div><div class="line">		world.sayHello();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="通过import加载多个"><a href="#通过import加载多个" class="headerlink" title="通过import加载多个"></a>通过<code>import</code>加载多个</h2><h3 id="Spring-Beans-1"><a href="#Spring-Beans-1" class="headerlink" title="Spring Beans"></a>Spring Beans</h3><blockquote>
<p>两个简单的Spring bean。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//File : CustomerBo.java</span></div><div class="line"><span class="keyword">package</span> com.hhh.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"CustomerBo : "</span> + msg);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/***************************************************/</span></div><div class="line"><span class="comment">//File : SchedulerBo.java</span></div><div class="line"><span class="keyword">package</span> com.hhh.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerBo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"SchedulerBo : "</span> + msg);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Configuration示例-1"><a href="#Configuration示例-1" class="headerlink" title="@Configuration示例"></a>@Configuration示例</h3><blockquote>
<p>现在，使用JavaConfig @Configuration声明上述Bean类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//File : CustomerConfig.java</span></div><div class="line"><span class="keyword">package</span> com.hhh.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.core.CustomerBo;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span>(name=<span class="string">"customer"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> CustomerBo <span class="title">customerBo</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CustomerBo();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*****************************************************/</span></div><div class="line"><span class="comment">//File : SchedulerConfig.java</span></div><div class="line"><span class="keyword">package</span> com.hhh.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.core.SchedulerBo;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Bean</span>(name=<span class="string">"scheduler"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> SchedulerBo <span class="title">schedulerBo</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SchedulerBo();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Import示例"><a href="#Import示例" class="headerlink" title="@Import示例"></a>@Import示例</h3><blockquote>
<p>加载主配置文件，并进行测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.appconfig;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.config.CustomerConfig;</div><div class="line"><span class="keyword">import</span> com.hhh.config.SchedulerConfig;</div><div class="line"></div><div class="line"><span class="meta">@Import</span>(&#123;CustomerConfig.class,SchedulerConfig.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig2</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="执行程序-1"><a href="#执行程序-1" class="headerlink" title="执行程序"></a>执行程序</h3><blockquote>
<p>加载主配置文件，并进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.appconfig.AppConfig;</div><div class="line"><span class="keyword">import</span> com.hhh.appconfig.AppConfig2;</div><div class="line"><span class="keyword">import</span> com.hhh.core.CustomerBo;</div><div class="line"><span class="keyword">import</span> com.hhh.core.SchedulerBo;</div><div class="line"><span class="keyword">import</span> com.hhh.helloWorld.HelloWorld;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfig</span><span class="params">()</span></span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig2.class);</div><div class="line">		CustomerBo cb =  (CustomerBo) context.getBean(<span class="string">"customer"</span>);</div><div class="line">		cb.printMsg(<span class="string">"hahaha"</span>);</div><div class="line">		</div><div class="line">		SchedulerBo sb = (SchedulerBo) context.getBean(<span class="string">"scheduler"</span>);</div><div class="line">		sb.printMsg(<span class="string">"heiheihei"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://www.yiibai.com/spring/spring-3-javaconfig-import-example.html" target="_blank" rel="external">Spring JavaConfig @Import实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注解替代&quot;&gt;&lt;a href=&quot;#注解替代&quot; class=&quot;headerlink&quot; title=&quot;注解替代&quot;&gt;&lt;/a&gt;注解替代&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bea
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring自动装配Beans</title>
    <link href="https://super3h.me/2017/02/22/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8DBeans/"/>
    <id>https://super3h.me/2017/02/22/Spring自动装配Beans/</id>
    <published>2017-02-22T05:31:48.467Z</published>
    <updated>2017-02-23T07:56:54.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring自动装配Beans的5中模式"><a href="#Spring自动装配Beans的5中模式" class="headerlink" title="Spring自动装配Beans的5中模式"></a>Spring自动装配Beans的5中模式</h1><blockquote>
<p>在Spring框架，可以用 auto-wiring 功能会自动装配Bean。要启用它，只需要在 <bean>定义<code>“autowire”</code>属性。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span> /&gt;</span></div></pre></td></tr></table></figure></bean></p>
</blockquote>
<ul>
<li>在Spring中，支持 5 自动装配模式。<ul>
<li><code>no</code> – 缺省情况下，自动配置是通过“ref”属性手动设定</li>
<li><code>byName</code> – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。</li>
<li><code>byType</code> – 按数据类型自动装配。如果一个bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。</li>
<li><code>constructor</code> – 在构造函数参数的byType方式。</li>
<li><code>autodetect</code> – 如果找到默认的构造函数，使用“自动装配用构造”; 否则，使用“按类型自动装配”。</li>
</ul>
</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><blockquote>
<p><code>Customer</code> 和 <code>Person</code> 对象自动装配示范。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.person = person;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.person = person;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Auto-Wiring-‘no’"><a href="#Auto-Wiring-‘no’" class="headerlink" title="Auto-Wiring ‘no’"></a>Auto-Wiring ‘no’</h2><blockquote>
<p>这是默认的模式，你需要通过 ‘ref’ 属性来连接 bean。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">ref</span>=<span class="string">"person"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Auto-Wiring-‘byName’"><a href="#Auto-Wiring-‘byName’" class="headerlink" title="Auto-Wiring ‘byName’"></a>Auto-Wiring ‘byName’</h2><blockquote>
<p>按属性名称自动装配。在这种情况下，由于<strong>对“person” bean的名称是相同于“customer” bean 的属性(“person”)名称</strong>，所以，Spring会自动通过setter方法将其装配 – “setPerson(Person person)“.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span> /&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Auto-Wiring-‘byType’"><a href="#Auto-Wiring-‘byType’" class="headerlink" title="Auto-Wiring ‘byType’"></a>Auto-Wiring ‘byType’</h2><blockquote>
<p>通过按属性的数据类型自动装配Bean。在这种情况下，<strong>由于“Person” bean中的数据类型是与“customer” bean的属性(Person对象)的数据类型一样的</strong>，所以，Spring会自动通过setter方法将其自动装配。– “setPerson(Person person)“.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Auto-Wiring-‘constructor’"><a href="#Auto-Wiring-‘constructor’" class="headerlink" title="Auto-Wiring ‘constructor’"></a>Auto-Wiring ‘constructor’</h2><blockquote>
<p>通过构造函数参数的数据类型按属性自动装配Bean。在这种情况下，<strong>由于“person” bean的数据类型与“customer” bean的属性(Person对象)的构造函数参数的数据类型是一样的</strong>，所以，Spring通过构造方法自动装配 – “public Customer(Person person)“.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Customer"</span> <span class="attr">autowire</span>=<span class="string">"constructor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.yiibai.common.Person"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://www.yiibai.com/spring/spring-auto-wiring-beans-in-xml.html" target="_blank" rel="external">Spring自动装配Beans</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring自动装配Beans的5中模式&quot;&gt;&lt;a href=&quot;#Spring自动装配Beans的5中模式&quot; class=&quot;headerlink&quot; title=&quot;Spring自动装配Beans的5中模式&quot;&gt;&lt;/a&gt;Spring自动装配Beans的5中模式&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>maven外部依赖</title>
    <link href="https://super3h.me/2017/02/22/maven%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96/"/>
    <id>https://super3h.me/2017/02/22/maven外部依赖/</id>
    <published>2017-02-22T02:18:33.817Z</published>
    <updated>2017-02-22T02:26:57.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven外部依赖"><a href="#maven外部依赖" class="headerlink" title="maven外部依赖"></a>maven外部依赖</h1><blockquote>
<p>正如大家所了解的那样，Maven确实使用 Maven 库的概念作依赖管理。但是，如果依赖是在远程存储库和中央存储库不提供那会怎么样？ Maven 提供为使用外部依赖的概念，就是应用在这样的场景中的。<br>举一个例子，让我们在<a href="http://www.yiibai.com/maven/maven_creating_project.html" target="_blank" rel="external">Maven创建项目</a>这一章节中创建的项目做以下的修改</p>
<pre><code>- 添加 lib 文件夹到 src 文件夹
- 复制任何的 jar 到 lib 文件夹。这里使用的是 ldapjdk.jar，这是 LDAP 操作的辅助库
</code></pre><p>目录结构如下:<br><img src="/2017/02/22/maven外部依赖/1.jpg" alt=""><br>在这里，在项目中指定自己所用的库，它可以包含 jar 文件，但是可能无法在任何 Maven 存储库找到，那么需要从外部下载。如果代码使用这个 Maven 库但没有办法找到，那么 Maven 构建将会失败，因为它在编译阶段使用指这个库无法下载或无法找到。<br>要处理这种情况，<em>需要添加外部依赖项</em>，如使用下列方式在 Maven 的 pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></div><div class="line">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 </span></div><div class="line">   http://maven.apache.org/maven-v4_0_0.xsd"&gt;</div><div class="line">   </div><div class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.bank<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumerBanking<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumerBanking<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\lib\ldapjdk.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>再看上面例子中的第二个依赖元素（dependency），它清除以下有关外部依赖的重要概念。</p>
<pre><code>- 外部依赖（JAR库的位置）可以在 pom.xml 中配置为与其他依赖的方式相同；
- 指定 groupId 同样作为库的名称；
- 指定 artifactId 同样作为库的名称
- 指定范围的系统；
- 指定相系统项目的位置；
</code></pre></blockquote>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p>详情请参考<a href="http://www.yiibai.com/maven/maven_external_dependencies.html" target="_blank" rel="external">Maven外部依赖</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;maven外部依赖&quot;&gt;&lt;a href=&quot;#maven外部依赖&quot; class=&quot;headerlink&quot; title=&quot;maven外部依赖&quot;&gt;&lt;/a&gt;maven外部依赖&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;正如大家所了解的那样，Maven确实使用 Maven 库的
    
    </summary>
    
      <category term="maven" scheme="https://super3h.me/categories/maven/"/>
    
    
  </entry>
  
  <entry>
    <title>maven-Eclipse里导入MavenWeb工程</title>
    <link href="https://super3h.me/2017/02/22/maven-Eclipse%E9%87%8C%E5%AF%BC%E5%85%A5MavenWeb%E5%B7%A5%E7%A8%8B/"/>
    <id>https://super3h.me/2017/02/22/maven-Eclipse里导入MavenWeb工程/</id>
    <published>2017-02-22T01:22:32.149Z</published>
    <updated>2017-02-22T01:27:16.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p>详情参考<a href="http://jingyan.baidu.com/article/9f63fb91a7d2a5c8400f0e20.html" target="_blank" rel="external">使用Eclipse创建Maven Web工程</a></p>
<h1 id="所遇到的问题"><a href="#所遇到的问题" class="headerlink" title="所遇到的问题"></a>所遇到的问题</h1><blockquote>
<p>pom.xml报错:<code>web.xml is missing and &lt;failOnMissingWebXml&gt; is set to true</code></p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote>
<p>这时候需要<strong>右击项目——&gt;Java EE Tools——&gt;Generate Deployment Descriptor Stub.然后系统会在src/main/webapp/WEB_INF文件加下创建web.xml文件。</strong>错误解决！<br>当然这个方法是针对web项目的解决方案，如果你的工程不是web项目，那么还有另外一种解决方案，就是在pom文件中配置一下failOnMissingWebXml。具体配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h1&gt;&lt;p&gt;详情参考&lt;a href=&quot;http://jingyan.baidu.com/article/9f63fb91a7d2a5c8
    
    </summary>
    
      <category term="maven" scheme="https://super3h.me/categories/maven/"/>
    
    
  </entry>
  
  <entry>
    <title>maven相关参数讲解</title>
    <link href="https://super3h.me/2017/02/21/maven%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E8%AE%B2%E8%A7%A3/"/>
    <id>https://super3h.me/2017/02/21/maven相关参数讲解/</id>
    <published>2017-02-21T14:16:56.887Z</published>
    <updated>2017-02-21T14:27:59.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven相关参数"><a href="#maven相关参数" class="headerlink" title="maven相关参数"></a>maven相关参数</h1><ul>
<li><code>groupId:</code>代表组织和整个项目的唯一标志。比如说所有的Maven组件的groupId都是org.apache.maven</li>
<li><code>artifactId:</code>具体项目的名称，它于groupId共同确定一个项目在maven repo中的位置，例如，<em>groupId=org.codehaus.mojo, artifactId=my-project的项目，在maven repo中的位置为：$M2_REPO/org/codehaus/mojo/my-project</em></li>
<li><code>version:</code>用于说明目前项目的版本，在引用依赖的时候确定具体依赖的版本号。</li>
<li><code>packaging:</code> 规定项目的输出格式，包括<code>jar、war、pom、apk</code>等，根据实际需要确定。例如，<em>开发一般的java库，可以使用jar packaging；开发android则是apk packaging。</em></li>
</ul>
<h1 id="例子说明"><a href="#例子说明" class="headerlink" title="例子说明"></a>例子说明</h1><blockquote>
<p>一般来说，Maven肯定要用到pom文件，全名叫<code>Project Object Model</code>。简单的说，就是这个pom.xml文件含有project的相关信息。以下面的pom文件为例，举个简单的例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven,apache.org/POM/4.0.0"</span></span></div><div class="line">　　<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3c.org/2001/XMLSchema-instance"</span></div><div class="line">　　<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">　　<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，groupId代表的是<code>唯一的一个标识</code>，比如一个组织或者一个项目的名字，基本上是唯一的，以这个maven为例就是org.apache.maven。<br><code>artifactId:</code>代表的是名字，如果刚刚那个有点像身份证，这个就是类似姓名的东西。<br><code>version:</code>比较好理解，就是版本号，比如1.2.1版本这样的。<br>最后的<code>packaging</code>是我们提供组件的类型，比如使用时打包成一个jar或者是一个war之类的，默认为打成jar包。<br><strong>还要注意不得不提到maven的一个插件<code>maven-archetype-plugin</code>。这个插件是为了方便我们弄一些模板或者原型直接生成会更加方便。通过cmd指令，我们可以确定我们需要的是哪个原型</strong><br>cmd的命令的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 -DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false -DgroupId=com.example -DartifactId=simple-service -Dpackage=com.example -DarchetypeVersion=2.17</div></pre></td></tr></table></figure></p>
<p><code>archetypeGroupId:</code>这个和刚刚那个很像，指的是原型唯一的标识archetypeArtifactId：原型的名字。<br><code>interactiveMode:</code>交互模式，默认为true。<em>我上面的cmd命令是一次性把该输入的都输入进去了，免去了交互所以是false。如果你选择交互的话，就是有一步一步的选项指引你去选择和填写相关的标识之类的。</em><br><code>archetypeCatalog:</code>这个例子里面没有，指的是查找规则<br>至于后面那些groupId之类的，前面已经说过的就是生成的项目的一些标识名字之类的相关信息，<strong>不过要注意这个package是生成项目的包结构而不是提供组件的类型了</strong></p>
</blockquote>
<h1 id="原文参考"><a href="#原文参考" class="headerlink" title="原文参考"></a>原文参考</h1><p><a href="https://zhidao.baidu.com/question/263104967434409685.html" target="_blank" rel="external">Maven中的参数分别是什么意思？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;maven相关参数&quot;&gt;&lt;a href=&quot;#maven相关参数&quot; class=&quot;headerlink&quot; title=&quot;maven相关参数&quot;&gt;&lt;/a&gt;maven相关参数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;groupId:&lt;/code&gt;代表组织和整个项目的唯一标志。
    
    </summary>
    
      <category term="maven" scheme="https://super3h.me/categories/maven/"/>
    
    
  </entry>
  
</feed>
