<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HHH&#39;Blog</title>
  <subtitle>it&#39;s time to fight for myself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://super3h.me/"/>
  <updated>2017-05-28T09:55:00.682Z</updated>
  <id>https://super3h.me/</id>
  
  <author>
    <name>super3H</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML中倒三角和正三角</title>
    <link href="https://super3h.me/2017/05/09/HTML%E4%B8%AD%E5%80%92%E4%B8%89%E8%A7%92%E5%92%8C%E6%AD%A3%E4%B8%89%E8%A7%92/"/>
    <id>https://super3h.me/2017/05/09/HTML中倒三角和正三角/</id>
    <published>2017-05-09T15:09:52.066Z</published>
    <updated>2017-05-28T09:55:00.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经常看到网站有这种符号▽的出现，刚好作业碰到这个问题，于是认真的学了下</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>看似容易的，其实真的很容易。。</p>
<ul>
<li>效果如下:<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/05/09/HTML中倒三角和正三角/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>分析代码如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span>&#123;</div><div class="line">    <span class="attribute">border-style</span>:dashed ;</div><div class="line">    <span class="attribute">border-color</span>:<span class="number">#bbb</span> transparent transparent;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">b</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">border-style</span>:dashed ;</div><div class="line">	<span class="attribute">border-color</span>:transparent transparent <span class="number">#bbb</span> transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>先看下面解释<br><code>border-color:red green blue pink;</code></p>
<ul>
<li>上边框是红色</li>
<li>右边框是绿色</li>
<li>下边框是蓝色</li>
<li>左边框是粉色<br>看完后，正三角解释:<br><code>border-color:#bbb transparent transparent;</code></li>
<li>上边框是灰色</li>
<li>右边框和左边框是透明色</li>
<li>下边框是透明色</li>
</ul>
<p>倒三角解释:<br>border-color:transparent transparent #bbb transparent;</p>
<ul>
<li>上边框是透明色</li>
<li>右边框是透明色</li>
<li>左边框是透明色</li>
<li>下边框是灰色</li>
</ul>
<p><font color="#CD5555">注意：这里一定要设置边框样式,即<code>border-style:dashed ;</code>，否则显示不了!!!</font></p>
<h1 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">		<span class="selector-tag">div</span>&#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">960px</span>;</div><div class="line">			<span class="attribute">margin-left</span>: auto;</div><div class="line">			<span class="attribute">margin-right</span>: auto;</div><div class="line">			<span class="attribute">font-size</span>: <span class="number">45px</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="selector-tag">b</span>&#123;</div><div class="line">			<span class="attribute">position</span>: relative;</div><div class="line">			<span class="attribute">top</span>: <span class="number">43px</span>;</div><div class="line">			<span class="attribute">left</span>: <span class="number">3px</span>;</div><div class="line">			<span class="attribute">border-width</span>:<span class="number">20px</span> ;</div><div class="line">			<span class="attribute">border-style</span>:dashed ;</div><div class="line">			<span class="attribute">border-color</span>:<span class="number">#bbb</span> transparent transparent;</div><div class="line">		&#125;</div><div class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">b</span>&#123;</div><div class="line">			<span class="attribute">position</span>: relative;</div><div class="line">			<span class="attribute">top</span>: -<span class="number">43px</span>;</div><div class="line">			<span class="attribute">left</span>: <span class="number">3px</span>;</div><div class="line">			<span class="attribute">border-style</span>:dashed ;</div><div class="line">			<span class="attribute">border-color</span>:transparent transparent <span class="number">#bbb</span> transparent;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			点我<span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;经常看到网站有这种符号▽的出现，刚好作业碰到这个问题，于是认真的学了下&lt;/p&gt;
&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; clas
    
    </summary>
    
      <category term="html" scheme="https://super3h.me/categories/html/"/>
    
    
      <category term="html" scheme="https://super3h.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>路由器配置-不等长</title>
    <link href="https://super3h.me/2017/05/05/%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE-%E4%B8%8D%E7%AD%89%E9%95%BF/"/>
    <id>https://super3h.me/2017/05/05/路由器配置-不等长/</id>
    <published>2017-05-05T01:51:43.811Z</published>
    <updated>2017-05-28T10:17:01.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul>
<li>网络号为：218.197.17.0</li>
<li>子网数： 4</li>
<li>每个子网分配数如下：<ul>
<li>A:70</li>
<li>B:35</li>
<li>C:30</li>
<li>D:20</li>
</ul>
</li>
<li><font color="#CD5555"><strong>问题：写出各个子网的ip范围</strong></font>

</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><font color="#EA6753"><strong>4个子网，按等长划分，需要2位，每个子网主机量为2<sup>6</sup>-2=62&lt;70 ，所以我们使用不等长划分，按主机数量来划分</strong></font>

<h2 id="A子网"><a href="#A子网" class="headerlink" title="A子网"></a>A子网</h2><font color="#CD5555"><strong>70台需要7位(子网掩码:255.255.255.128)，划分如下</strong></font>

<table>
<thead>
<tr>
<th style="text-align:center">子网掩码后8位</th>
<th style="text-align:center">可选网络号</th>
<th style="text-align:center">地址范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00 00 00 00</td>
<td style="text-align:center">218.197.17.0</td>
<td style="text-align:center">218.197.17.1</td>
</tr>
<tr>
<td style="text-align:center">10 00 00 00</td>
<td style="text-align:center">218.197.17.128</td>
<td style="text-align:center">218.197.17.126</td>
</tr>
</tbody>
</table>
<h2 id="B子网"><a href="#B子网" class="headerlink" title="B子网"></a>B子网</h2><font color="#CD5555"><strong>35台需要6位(子网掩码:255.255.255.192)，划分如下</strong></font>

<table>
<thead>
<tr>
<th style="text-align:center">子网掩码后8位</th>
<th style="text-align:center">可选网络号</th>
<th style="text-align:center">地址范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10 00 00 00</td>
<td style="text-align:center">218.197.17.128</td>
<td style="text-align:center">218.197.17.129</td>
</tr>
<tr>
<td style="text-align:center">11 00 00 00</td>
<td style="text-align:center">218.197.17.192</td>
<td style="text-align:center">218.197.17.190</td>
</tr>
</tbody>
</table>
<blockquote>
<font color="#CD5555"><strong>注意:00 00 00 00~10 00 00 00之间的已经被A子网占用了</strong></font>

</blockquote>
<h2 id="C子网"><a href="#C子网" class="headerlink" title="C子网"></a>C子网</h2><font color="#CD5555"><strong>30台需要5位(子网掩码:255.255.255.224)，划分如下</strong></font>

<table>
<thead>
<tr>
<th style="text-align:center">子网掩码后8位</th>
<th style="text-align:center">可选网络号</th>
<th style="text-align:center">地址范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">11 00 00 00</td>
<td style="text-align:center">218.197.17.192</td>
<td style="text-align:center">218.197.17.193</td>
</tr>
<tr>
<td style="text-align:center">11 10 00 00</td>
<td style="text-align:center">218.197.17.224</td>
<td style="text-align:center">218.197.17.222</td>
</tr>
</tbody>
</table>
<h2 id="D子网"><a href="#D子网" class="headerlink" title="D子网"></a>D子网</h2><font color="#CD5555"><strong>20台需要5位(子网掩码:255.255.255.224)，划分如下</strong></font>

<table>
<thead>
<tr>
<th style="text-align:center">子网掩码后8位</th>
<th style="text-align:center">可选网络号</th>
<th style="text-align:center">地址范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">11 10 00 00</td>
<td style="text-align:center">218.197.17.224</td>
<td style="text-align:center">218.197.17.225</td>
</tr>
<tr>
<td style="text-align:center">11 11 11 10</td>
<td style="text-align:center">218.197.17.254</td>
<td style="text-align:center">218.197.17.252</td>
</tr>
</tbody>
</table>
<h1 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/05/05/路由器配置-不等长/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><font color="#CD5555">路由器配置详细操作方法请参照上文:</font><a href="https://super3h.me/2017/04/21/%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/">路由器配置-等长</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;网络号为：218.197.17.0&lt;/li&gt;
&lt;li&gt;子网数： 4&lt;/li&gt;
&lt;li&gt;每个子网分配数如下：&lt;ul&gt;
&lt;li&gt;A:
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://super3h.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>容器深入研究-Map</title>
    <link href="https://super3h.me/2017/04/23/%E5%AE%B9%E5%99%A8%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6-Map/"/>
    <id>https://super3h.me/2017/04/23/容器深入研究-Map/</id>
    <published>2017-04-23T15:10:15.136Z</published>
    <updated>2017-05-28T10:16:34.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><font color="#CD5555"><strong>由于这几天看了些有关map的知识点，面试可能会被问到，所以来总结总结！！</strong></font>

<h1 id="Map介绍"><a href="#Map介绍" class="headerlink" title="Map介绍"></a>Map介绍</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/23/容器深入研究-Map/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<table>
<thead>
<tr>
<th>Map的实现</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashMap</td>
<td style="text-align:center">Map基于散列表的实现(取代了HashTable，下文将介绍),插入和查询”键值对”的开销是固定的，可以通过构造器设置容量和负载因子，以调整容器的性能</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td style="text-align:center">类似于HashMap,但是迭代遍历它时，取得”键值对”的顺序是插入次序、或者是最近最少使用(LRU)的次序。只比HashMap慢一点；而在迭代访问时速度反而更快、因为它使用链表维护内部次序</td>
</tr>
<tr>
<td>TreeMap</td>
<td style="text-align:center">基于红黑树的实现。查看”键”或”键值对”时，它们会被排序(次序由Comparable或Comparator决定)。TreeMap的特点在于，所得到的的结果是经过排序的。TreeMap是唯一的带有subMap()方法的Map，他可以返回一个子树</td>
</tr>
<tr>
<td>WeakHashMap</td>
<td style="text-align:center">弱键映射，允许释放映射所指向的对象；这是为解决某类特殊问题而设计的。如果映射之外没有引用指向某个”键”，则此”键”可以被垃圾收集器回收</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td style="text-align:center">一种线程安全的Map，它不涉及同步加锁。</td>
</tr>
<tr>
<td>IDentityHashMap</td>
<td style="text-align:center">使用==代替equals对”键”进行比较的散列映射。专门解决特殊问题二设计的</td>
</tr>
</tbody>
</table>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ul>
<li><strong>HashMap的存储结构</strong><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/23/容器深入研究-Map/2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li><p><strong>HashMap有四个构造方法，方法中有两个很重要的参数：初始容量和加载因子</strong></p>
<ul>
<li>这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），<strong><font color="#0077BB">初始容量</font>是创建哈希表时的容量（默认为16），<font color="#0077BB">加载因子</font>是哈希表当前key的数量和容量的比值，<font color="#CD5555">当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。</font></strong>如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。</li>
<li>JDK开发者规定的默认加载因子为0.75，因为这是一个比较理想的值。另外，无论指定初始容量为多少，构造方法都会将实际容量设为不小于指定容量的2的幂次方，且最大值不能超过2的30次方</li>
</ul>
</li>
<li><p><strong>重点分析HashMap中用的最多的两个方法put和get的源码</strong></p>
<ul>
<li><p>get方法源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取key对应的value</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> getForNullKey();</div><div class="line">    <span class="comment">// 获取key的hash值</span></div><div class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</div><div class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[indexFor(hash, table.length)]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="comment">// 判断key是否相同</span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</div><div class="line">            <span class="keyword">return</span> e.value;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 没找到则返回null</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取“key为null”的元素的值，HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！</span></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> e.value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，<font color="#CD5555"><strong>如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。</strong></font>记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。<font color="#CD5555"><strong>如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。</strong></font></p>
</li>
<li><p>put方法源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将“key-value”添加到HashMap中</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> putForNullKey(value);</div><div class="line">    <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></div><div class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            e.recordAccess(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 将key-value添加到table[i]处</span></div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果key为null，则将其添加到table[0]对应的链表中，如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，<font color="#CD5555"><strong>如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，且将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到单链表的头结点位置（每次新插入的节点都是放在头结点的位置）</strong></font>，该操作是有addEntry方法实现的，它的源码如下：</p>
</li>
<li><p>view code</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></div><div class="line">    Entry&lt;K, V&gt; e = table[bucketIndex];</div><div class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K, V&gt;(hash, key, value, e);</div><div class="line">    <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></div><div class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</div><div class="line">        resize(<span class="number">2</span> * table.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里倒数第三行的构造方法，<strong>将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。</strong>该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。两外注意最后两行代码，<strong>每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。</strong></p>
</li>
</ul>
</li>
<li><p><strong>重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列</strong></p>
<ul>
<li><p>由hash值找到对应索引的方法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>因为容量初始还是设定都会转化为2的幂次。故可以使用高效的位与运算替代模运算。下面会解释原因。</p>
</li>
<li><p>计算hash值的方法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</div><div class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>JDK 的 HashMap 使用了一个 hash 方法对hash值使用位的操作，使hash值的计算效率很高。为什么这样做？<font color="#00C54A">主要是因为如果直接使用hashcode值，那么这是一个int值（8个16进制数，共32位），int值的范围正负21亿多，但是hash表没有那么长，一般比如初始16，自然散列地址需要对hash表长度取模运算，得到的余数才是地址下标。假设某个key的hashcode是0AAA0000，hash数组长默认16，如果不经过hash函数处理，该键值对会被存放在hash数组中下标为0处，因为0AAA0000 &amp; (16-1) = 0。过了一会儿又存储另外一个键值对，其key的hashcode是0BBB0000，得到数组下标依然是0，这就说明这是个实现得很差的hash算法，因为hashcode的1位全集中在前16位了，导致算出来的数组下标一直是0。于是明明key相差很大的键值对，却存放在了同一个链表里，导致以后查询起来比较慢（蜕化为了顺序查找）。</font>故JDK的设计者使用hash函数的若干次的移位、异或操作，把hashcode的“1位”变得“松散”，非常巧妙。</p>
</li>
</ul>
</li>
<li><p><strong>关于扩容。看hashmap的扩容方法，resize方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的单位</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</div><div class="line">        Entry[] oldTable = table;</div><div class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</div><div class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，</span></div><div class="line">        <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。</span></div><div class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</div><div class="line">        transfer(newTable);</div><div class="line">        table = newTable;</div><div class="line">        threshold = (<span class="keyword">int</span>) (newCapacity * loadFactor);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>很明显，是从新建了一个HashMap的底层数组，长度为原来的两倍，而后调用transfer方法，将旧HashMap的全部元素添加到新的HashMap中（要重新计算元素在新的数组中的索引位置）。transfer方法的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将HashMap中的全部元素都添加到newTable中</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</div><div class="line">        Entry[] src = table;</div><div class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</div><div class="line">            Entry&lt;K, V&gt; e = src[j];</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                src[j] = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    Entry&lt;K, V&gt; next = e.next;</div><div class="line">                    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</div><div class="line">                    e.next = newTable[i];</div><div class="line">                    newTable[i] = e;</div><div class="line">                    e = next;</div><div class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>很明显，扩容是一个相当耗时的操作，因为它需要重新计算这些元素在新的数组中的位置并进行复制处理。因此，我们在用HashMap时，最好能提前预估下HashMap中元素的个数，这样有助于提高HashMap的性能。</p>
<h3 id="更详细内容"><a href="#更详细内容" class="headerlink" title="更详细内容"></a>更详细内容</h3><p><a href="https://zhuanlan.zhihu.com/p/24338517" target="_blank" rel="external">HashMap 和 HashTable 源码学习和面试总结</a></p>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><ul>
<li>LinkedHashMap 是 HashMap 的一个子类，它保留插入的顺序，如果需要输出的顺序和输入时的相同，那么就选用 LinkedHashMap。</li>
<li>LinkedHashMap 是 Map 接口的哈希表和链接列表实现，具有可预知的迭代顺序。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</li>
<li>LinkedHashMap 实现与 HashMap 的不同之处在于，LinkedHashMap 维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。</li>
<li>注意，此实现不是同步的。如果多个线程同时访问链接的哈希映射，而其中至少一个线程从结构上修改了该映射，则它必须保持外部同步。</li>
</ul>
<p>根据链表中元素的顺序可以分为：<strong>按插入顺序的链表，和按访问顺序(调用 get 方法)的链表。默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表</strong></p>
<h3 id="详情参考"><a href="#详情参考" class="headerlink" title="详情参考"></a>详情参考</h3><p><a href="http://wiki.jikexueyuan.com/project/java-collection/linkedhashmap.html" target="_blank" rel="external">LinkedHashMap 的实现原理</a></p>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;font color=&quot;#CD5555&quot;&gt;&lt;strong&gt;由于这几天看了些有关map的知识点，面试可能会被问到，所以来总结总结！！&lt;/stron
    
    </summary>
    
      <category term="JavaSE" scheme="https://super3h.me/categories/JavaSE/"/>
    
    
      <category term="JavaSE Map" scheme="https://super3h.me/tags/JavaSE-Map/"/>
    
  </entry>
  
  <entry>
    <title>路由器配置-等长</title>
    <link href="https://super3h.me/2017/04/21/%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE-%E7%AD%89%E9%95%BF/"/>
    <id>https://super3h.me/2017/04/21/路由器配置-等长/</id>
    <published>2017-04-21T14:30:22.550Z</published>
    <updated>2017-05-28T10:17:24.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>有一个企业网络拓扑结构如上图，回答如下问题：</p>
<ol>
<li>给出子网划分方案，并给出每个子网主机的地址空间；</li>
<li>完成网络地址分配，以表格的形式提供；</li>
<li>完成主机PCD、www、及DNS的配置，以表格的形式提供；</li>
<li>完成路由器Router2的端口地址及静态路由配置并保存。</li>
</ol>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h2><p>由图知：<strong>共有四个子网，主机号需提供2位给网络号：所以分别为:00,01,10,11，所以可得以下地址(这里把全1的广播号和全0的网络号都算进去了)，ps:配置时候不用管点是红色还是绿色，后面会介绍，做什么事都得一步一步！！！</strong></p>
<table>
<thead>
<tr>
<th>网络</th>
<th style="text-align:center">地址空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>net1</td>
<td style="text-align:center">218.197.15.0~218.197.15.63</td>
</tr>
<tr>
<td>net2</td>
<td style="text-align:center">218.197.15.64~218.197.15.127</td>
</tr>
<tr>
<td>net3</td>
<td style="text-align:center">218.197.15.128~218.197.15.191</td>
</tr>
<tr>
<td>net4</td>
<td style="text-align:center">218.197.15.192~218.197.15.255</td>
</tr>
</tbody>
</table>
<p>这里我们在图上配置好我们的图:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>这里net1、net2、net3、net4都需以其实地址开始，即0,64,128,192</p>
<h2 id="划分主机地址"><a href="#划分主机地址" class="headerlink" title="划分主机地址"></a>划分主机地址</h2><p>我们想看左边那一块,由题目可知，<strong>给主机分配218.197.17.1~218.197.17.254即可(除去网络号和主机号)</strong>，配置如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>接下来我们给pc机和服务器配置相应的ip:</p>
<ul>
<li><p>pc机配置如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>另一个pc机操作也同上</p>
</blockquote>
</li>
<li><p>服务器配置如下:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>另一个服务器操作也同上</p>
</blockquote>
</li>
</ul>
<p><strong>配置完后，主机、服务器之间就可以相互ping通了！！</strong>,操作如下:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/6.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><strong>接下来我们用pc0来ping主机和服务器</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><strong>接下来我们配置其网关，网关范围也在218.197.17.1~218.197.17.254(除去网络号和主机号)之间</strong>:</p>
<ul>
<li><p>配置链接左边那块的路由器</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/11.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p> <strong>配置默认网关只用在圆柱体的路由器上的<code>fa0/0</code>端口配置以上信息即可，切记一定要点击启用，否则图上的绿点就是红点 (博主已经全部启用，所以你们看到的是绿色) ps:鼠标悬停在绿色(红色)的小圆点上就可以知道其端口号</strong></p>
</blockquote>
</li>
<li><p>配置各个pc、服务器的默认网关、和dns服务器</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/12.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p><strong>DNS服务器IP我们一开始配置的为218.197.17.100，网关配置的为218.197.17.250，这里博主只演示了CopyPC0的配置，其他几个同理！！</strong>,接下来我们ping一下网关即可验证：</p>
</blockquote>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/13.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>最右边操作也同理:ip地址范围218.197.16.1~218.197.16.254即可(网络号和广播号除外)</strong>,我的Ip地址，网关配置(最后成果是右边pc能访问左边的服务器，所以这里pc的DNS服务器我们也配置成左边的DNS服务器的IP)如下:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/14.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="配置4个路由的端口"><a href="#配置4个路由的端口" class="headerlink" title="配置4个路由的端口"></a>配置4个路由的端口</h2><table>
<thead>
<tr>
<th>网络</th>
<th style="text-align:center">地址空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>net1</td>
<td style="text-align:center">218.197.15.0~218.197.15.63</td>
</tr>
<tr>
<td>net2</td>
<td style="text-align:center">218.197.15.64~218.197.15.127</td>
</tr>
<tr>
<td>net3</td>
<td style="text-align:center">218.197.15.128~218.197.15.191</td>
</tr>
<tr>
<td>net4</td>
<td style="text-align:center">218.197.15.192~218.197.15.255</td>
</tr>
</tbody>
</table>
<p><strong>net1之间的地址空间范围为:218.197.15.1~218.197.15.62(除去广播号和网络号)</strong>,我们在net1之间的两个端口配置上以上的范围即可:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/15.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<blockquote>
<p>操作如下:</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/16.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里解释一下子网掩码写192的原因:<strong>由于前面我们划分子网给了2位作为网络号，所以最后8位为1100 0000</strong><br>其他配置同理:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/17.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>操作完成后，我们来用pc机ping一下来确认:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/18.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><strong>可以看到我们ping218.197.15.62，可以通，但是218.197.15.1不行，因为这个路由器并不知道发送方在哪个网络，从而不知道数据发送给谁，因此这里我们需要给其配置静态路由</strong>，配置如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/19.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><strong>这里目的网络为218.197.17.0这个网络，子网掩码也为这个网络的掩码，下一跳是指需要经过的下一个路由器端口，通过该路由器才能将数据路由出去</strong>，这里我们ping一下218.197.15.1来确认一下即可:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/20.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<blockquote>
<p><strong>倘若我们要通过最左边的电脑来访问左右边的电脑咋办？？</strong><br><code>分析：</code>最左边访问最右边，<strong>当然要通过管理最左边的路由器来路由数据</strong>，所以这里我们配置其静态路由：</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/21.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这里有两条路可以走，博主选的上面这条路，配置完后就可以访问了么？？我们来试一下：</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/22.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>发现都没办法到达目的地，**因为这里我们通过最上方的路由器来路由数据，但它不知道到目的网络在哪，我们再来配置他的静态路由</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/23.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个时候我们来ping一下:</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/24.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>发现可以到达目的网络，但是请求超时，因为这个路由器并不知道发送方在哪个网络，从而不知道数据发送给谁，因此这里我们需要给其配置静态路由</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/25.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<blockquote>
<p>在ping一下确认：</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/21/路由器配置-等长/26.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p><strong>ping通了，这个时候你会纳闷，数据经过最上方的路由器路由，但是最上方的路由器没有配置目的网络到218.197.17.0啊！！！其实我们刚开始就已经配了，往上翻一下就知道了！！</strong></p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>之前博主也一直不知道，直到期中考试考了这个，我才重视起来，多亏同学不停地教我，花了博主一晚上才弄懂！！<br><strong>俗话说:Talk is cheap,show me the code，一定要练习，上面只展示了上半部分的路由，读者有心可以从下面路由数据，当你下面路由成功了，你才算真正的懂！！！</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;

    
    </summary>
    
      <category term="计算机网络" scheme="https://super3h.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://super3h.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="https://super3h.me/2017/04/17/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://super3h.me/2017/04/17/Java8新特性/</id>
    <published>2017-04-17T11:38:45.160Z</published>
    <updated>2017-05-28T10:00:39.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个程序员必须与时俱进，所以本文介绍有关Java8相关知识</p>
<h1 id="Lambda表达式和函数式接口"><a href="#Lambda表达式和函数式接口" class="headerlink" title="Lambda表达式和函数式接口"></a>Lambda表达式和函数式接口</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为一个程序员必须与时俱进，所以本文介绍有关Java8相关知识&lt;/p&gt;
&lt;h1 id=&quot;Lambda表达式和函数式接口&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="JavaSE" scheme="https://super3h.me/categories/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://super3h.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Java-Sum练习</title>
    <link href="https://super3h.me/2017/04/15/Java-Sum%E7%BB%83%E4%B9%A0/"/>
    <id>https://super3h.me/2017/04/15/Java-Sum练习/</id>
    <published>2017-04-15T11:45:24.098Z</published>
    <updated>2017-05-28T10:00:05.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关算法数字求和总结"><a href="#有关算法数字求和总结" class="headerlink" title="有关算法数字求和总结"></a>有关算法数字求和总结</h1><p><strong>题目设置数字个数设置不大时，可以添加判断来减少算法的时间复杂度，但是当个数过多时，添加过多的判断则会导致处理时间增大！！！</strong></p>
<h2 id="TowSum"><a href="#TowSum" class="headerlink" title="TowSum"></a>TowSum</h2><ul>
<li>题目<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/15/Java-Sum练习/2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>解决<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">	    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">	    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">	        <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</div><div class="line">	            result[<span class="number">1</span>] = i + <span class="number">1</span>;</div><div class="line">	            result[<span class="number">0</span>] = map.get(target - numbers[i]);</div><div class="line">	            <span class="keyword">return</span> result;</div><div class="line">	        &#125;</div><div class="line">	        map.put(numbers[i], i + <span class="number">1</span>);</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ThreeSum"><a href="#ThreeSum" class="headerlink" title="ThreeSum"></a>ThreeSum</h2><ul>
<li>题目<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/15/Java-Sum练习/3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>解决<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    Arrays.sort(nums);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">2</span> &lt; nums.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;              <span class="comment">// skip same result</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>, k = nums.length - <span class="number">1</span>;  </div><div class="line">        <span class="keyword">int</span> target = -nums[i];</div><div class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] == target) &#123;</div><div class="line">                res.add(Arrays.asList(nums[i], nums[j], nums[k]));</div><div class="line">                j++;</div><div class="line">                k--;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;  <span class="comment">// skip same result</span></div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;  <span class="comment">// skip same result</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[j] + nums[k] &gt; target) &#123;</div><div class="line">                k--;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="FourSum"><a href="#FourSum" class="headerlink" title="FourSum"></a>FourSum</h2><ul>
<li>题目<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/15/Java-Sum练习/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>解决<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)&#123;</div><div class="line">		List&lt;List&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">		Arrays.sort(nums);</div><div class="line">		<span class="keyword">if</span>(nums.length&lt;<span class="number">4</span>)</div><div class="line">			<span class="keyword">return</span> results;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">3</span>;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length-<span class="number">2</span>;j++)&#123;</div><div class="line">				<span class="keyword">if</span>((j-<span class="number">1</span>)!=i&amp;&amp;nums[j]==nums[j-<span class="number">1</span>])</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">int</span> k = j+<span class="number">1</span>,l = nums.length-<span class="number">1</span>;</div><div class="line">				<span class="keyword">int</span> subTarget = target-nums[i]-nums[j];</div><div class="line">				<span class="keyword">while</span>(l&gt;k)&#123;</div><div class="line">					<span class="keyword">if</span>(nums[l]+nums[k] == subTarget)&#123;</div><div class="line">						results.add(Arrays.asList(nums[i],nums[j],nums[k],nums[l]));</div><div class="line">						l--;</div><div class="line">						k++;</div><div class="line">						<span class="keyword">while</span>(k&lt;l &amp;&amp; nums[k] == nums[k-<span class="number">1</span>]) k++;</div><div class="line">						<span class="keyword">while</span>(k&lt;l &amp;&amp;nums[l] == nums[l+<span class="number">1</span>]) l--;</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[l]+nums[k] &gt; subTarget)&#123;</div><div class="line">						l--;</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						k++;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="FourSum2"><a href="#FourSum2" class="headerlink" title="FourSum2"></a>FourSum2</h2><ul>
<li>题目<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/04/15/Java-Sum练习/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>解决<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B, <span class="keyword">int</span>[] C, <span class="keyword">int</span>[] D)</span> </span>&#123;</div><div class="line">	    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	    </div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C.length; i++) &#123;</div><div class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;D.length; j++) &#123;</div><div class="line">	            <span class="keyword">int</span> sum = C[i] + D[j];</div><div class="line">	            map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    </div><div class="line">	    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++) &#123;</div><div class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;B.length; j++) &#123;</div><div class="line">	            res += map.getOrDefault(-<span class="number">1</span> * (A[i]+B[j]), <span class="number">0</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    </div><div class="line">	    <span class="keyword">return</span> res;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;有关算法数字求和总结&quot;&gt;&lt;a href=&quot;#有关算法数字求和总结&quot; class=&quot;headerlink&quot; title=&quot;有关算法数字求和总结&quot;&gt;&lt;/a&gt;有关算法数字求和总结&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目设置数字个数设置不大时，可以添加判断来减少算法的时间复杂
    
    </summary>
    
      <category term="JavaSE" scheme="https://super3h.me/categories/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://super3h.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Java-ValueOf</title>
    <link href="https://super3h.me/2017/04/15/Java-ValueOf/"/>
    <id>https://super3h.me/2017/04/15/Java-ValueOf/</id>
    <published>2017-04-15T05:57:14.156Z</published>
    <updated>2017-05-28T10:00:14.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="value-of"><a href="#value-of" class="headerlink" title="value of"></a>value of</h1><ul>
<li>Integer valueOf(int i)：返回一个表示指定的 int 值的 Integer 实例。</li>
<li>Integer valueOf(String s):返回保存指定的 String 的值的 Integer 对象。</li>
<li>Integer valueOf(String s, int radix): 返回一个 Integer 对象，该对象中保存了用第二个参数提供的基数进行解析时从指定的 String 中提取的值。</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">System.out.println(Integer.valueOf(<span class="string">"127"</span>)==Integer.valueOf(<span class="string">"127"</span>));<span class="comment">//true</span></div><div class="line">System.out.println(Integer.valueOf(<span class="string">"128"</span>)==Integer.valueOf(<span class="string">"128"</span>));<span class="comment">//false</span></div><div class="line">System.out.println(Integer.parseInt(<span class="string">"128"</span>)==Integer.valueOf(<span class="string">"128"</span>));<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>看官方文档可以发现:</p>
<blockquote>
<p><code>This method will always cache values in the range -128 to 127</code><br>默认会缓存-128到127间的值，因为128没有被缓存，所以每次调用，都会生成一个新的整型对象，因此两个128整型对象是不同的对象。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;value-of&quot;&gt;&lt;a href=&quot;#value-of&quot; class=&quot;headerlink&quot; title=&quot;value of&quot;&gt;&lt;/a&gt;value of&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Integer valueOf(int i)：返回一个表示指定的 int 值的 
    
    </summary>
    
      <category term="JavaSE" scheme="https://super3h.me/categories/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://super3h.me/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC 注解</title>
    <link href="https://super3h.me/2017/03/29/SpringMVC%20%E6%B3%A8%E8%A7%A3/"/>
    <id>https://super3h.me/2017/03/29/SpringMVC 注解/</id>
    <published>2017-03-29T08:24:45.565Z</published>
    <updated>2017-05-28T10:10:49.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初学SpringMVC，发现有些注解功能有些类似，都为获取前台数据，这里主要讲这些注解的分别！</p>
<h1 id="SpringMVC-注解"><a href="#SpringMVC-注解" class="headerlink" title="SpringMVC 注解"></a>SpringMVC 注解</h1><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p><strong>用来映射RESTful风格的url</strong>，例如<code>@RequestMapping(/getCourse/{id})</code>，获取id则可以通过这个<code>@PathVariable(&quot;id&quot;) Integer courseId</code>来拿到.</p>
<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p><strong>既处理get 方式中queryString的值，也可以处理post方式中 body data的值</strong>，即<code>(@RequestParam(&quot;courseId&quot;)</code>可以处理:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;pageContext.request.contextPath &#125;/requestparam?courseId=4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">或</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/requestparam"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"courseId"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><ul>
<li>用于方法:<br><strong>用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model</strong>，例子如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"countryList"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCountryList</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  Map&lt;String, String&gt; countryList = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">  countryList.put(<span class="string">"US"</span>, <span class="string">"United States"</span>);</div><div class="line">  countryList.put(<span class="string">"CH"</span>, <span class="string">"China"</span>);</div><div class="line">  countryList.put(<span class="string">"SG"</span>, <span class="string">"Singapore"</span>);</div><div class="line">  countryList.put(<span class="string">"MY"</span>, <span class="string">"Malaysia"</span>);</div><div class="line">  <span class="keyword">return</span> countryList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>前台可以直接获取map里的值:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form:select</span> <span class="attr">path</span>=<span class="string">"country"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form:option</span> <span class="attr">value</span>=<span class="string">"NONE"</span> <span class="attr">label</span>=<span class="string">"请选择..."</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form:options</span> <span class="attr">items</span>=<span class="string">"$&#123;countryList&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form:select</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>同于参数：<br>和<code>@RequestParam</code>类似，不过比这个更方便，不仅可以获取参数，还可封装到对象中:<br><code>前台:</code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form:form</span> <span class="attr">method</span>=<span class="string">"POST"</span></span></div><div class="line">		<span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/addUser"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">form:password</span> <span class="attr">path</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>地址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">form:textarea</span> <span class="attr">path</span>=<span class="string">"address"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"30"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>后台获取：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/addUser"</span>,method=RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@ModelAttribute Student student,ModelMap model)</span></span>&#123;</div><div class="line">		<span class="comment">//do something....</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"userlist"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>该注解用于<strong>读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上 ，再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上**</strong><br>该注解常用来处理Content-Type: <strong>不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</strong></p>
<blockquote>
<p>例如用异步处理：</p>
</blockquote>
<ul>
<li><p>后台</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/ajax"</span>,method=RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> Course <span class="title">ajax</span><span class="params">(@RequestBody Course course)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> course;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>前台</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			<span class="attr">url</span>:<span class="string">" hello/ajax"</span>,</div><div class="line">			<span class="attr">data</span>:<span class="built_in">JSON</span>.stringify(&#123;<span class="string">'id'</span>:<span class="number">2</span>,<span class="string">'cname'</span>:<span class="string">'语文'</span>,<span class="string">'teacher'</span>:<span class="string">'djh'</span>&#125;),</div><div class="line">			<span class="attr">type</span>:<span class="string">'post'</span>,</div><div class="line">			<span class="attr">contentType</span>:<span class="string">"application/json"</span>,  </div><div class="line">			<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">				alert(data);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>注意：</code><font color="red"><strong>这里data必须为字符串，否则会报Unrecognized token ‘xxx’: was expecting (‘true’, ‘false’ or ‘null’)</strong></font></p>
</blockquote>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>该注解用于将Controller的方法返回的对象，<strong>通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</strong></p>
<blockquote>
<p>了解更多内容请看:<a href="http://blog.csdn.net/walkerjong/article/details/7946109" target="_blank" rel="external">@RequestParam @RequestBody @PathVariable 等参数绑定注解详解</a><br><a href="http://blog.csdn.net/walkerjong/article/details/7520896" target="_blank" rel="external">@RequestBody, @ResponseBody 注解详解</a><br><a href="http://www.jianshu.com/p/7097fea8ce3f" target="_blank" rel="external">SpringMVC @ResponseBody和@RequestBody使用</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;初学SpringMVC，发现有些注解功能有些类似，都为获取前台数据，这里主要讲这些注解的分别！&lt;/p&gt;
&lt;h1 id=&quot;SpringMVC-
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
      <category term="Spring" scheme="https://super3h.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>div覆盖</title>
    <link href="https://super3h.me/2017/03/28/div%E8%A6%86%E7%9B%96/"/>
    <id>https://super3h.me/2017/03/28/div覆盖/</id>
    <published>2017-03-28T01:05:47.053Z</published>
    <updated>2017-05-28T09:50:25.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>后端工程师也有一个前台梦  哈哈!!!!</p>
<h1 id="div覆盖"><a href="#div覆盖" class="headerlink" title="div覆盖"></a>div覆盖</h1><p><code>目的</code>：通过点击按钮，弹出小方框背景为灰色，效果如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/28/div覆盖/./div覆盖/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>再次点击灰色，样式恢复<br>源码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-class">.main</span> &#123;</div><div class="line">				<span class="attribute">width</span>: <span class="number">960px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">800px</span>;</div><div class="line">				<span class="attribute">background-color</span>: <span class="number">#FF9966</span>;</div><div class="line">				<span class="attribute">margin</span>: <span class="number">0px</span> auto;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="selector-class">.mask</span> &#123;</div><div class="line">				<span class="attribute">z-index</span>: <span class="number">900</span>;</div><div class="line">				<span class="comment">/*以下设置覆盖整个窗口*/</span></div><div class="line">				<span class="attribute">position</span>: fixed;</div><div class="line">				<span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">				<span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">				<span class="attribute">background</span>: <span class="number">#000</span>;<span class="comment">/*灰色背景*/</span></div><div class="line">				<span class="attribute">opacity</span>: <span class="number">0.45</span>;<span class="comment">/*透明度*/</span></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="selector-class">.opendiv</span> &#123;</div><div class="line">				<span class="attribute">z-index</span>: <span class="number">920</span>;</div><div class="line">				<span class="comment">/*设置div位置*/</span></div><div class="line">				<span class="attribute">position</span>: absolute;</div><div class="line">				<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">				<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">				<span class="attribute">margin-left</span>: -<span class="number">175px</span>;</div><div class="line">				<span class="attribute">margin-top</span>: -<span class="number">125px</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">334px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">180px</span>;</div><div class="line">				<span class="attribute">background-color</span>: <span class="number">#6699FF</span>;</div><div class="line">				<span class="attribute">text-align</span>: center;</div><div class="line">				<span class="attribute">padding-top</span>: <span class="number">20px</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">topmargin</span>=<span class="string">"0"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">			网页主体内容，包含网页其他栏目</div><div class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"on()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--蒙板--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">onclick</span>=<span class="string">"off()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"opendiv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">			最上层DIV覆盖下面的全部DIV</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    		<span class="comment">//点击后，将div样式display设置为inline-block</span></div><div class="line">			<span class="keyword">var</span> mask = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"mask"</span>)[<span class="number">0</span>];</div><div class="line">			<span class="keyword">var</span> opendiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"opendiv"</span>)[<span class="number">0</span>];</div><div class="line">			<span class="keyword">if</span>(mask.style.display==<span class="string">"none"</span>)&#123;</div><div class="line">				mask.style.display=<span class="string">"inline-block"</span>;</div><div class="line">				opendiv.style.display=<span class="string">"inline-block"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    		<span class="comment">//点击后，将div样式display设置为none</span></div><div class="line">			<span class="keyword">var</span> mask = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"mask"</span>)[<span class="number">0</span>];</div><div class="line">			<span class="keyword">var</span> opendiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"opendiv"</span>)[<span class="number">0</span>];</div><div class="line">			mask.style.display=<span class="string">"none"</span>;</div><div class="line">			opendiv.style.display=<span class="string">"none"</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>解释见代码！！</p>
<blockquote>
<p>详情请参考<a href="http://www.91ctc.com/article/article-129.html" target="_blank" rel="external">DIV块的覆盖，DIV层遮盖其他DIV</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;后端工程师也有一个前台梦  哈哈!!!!&lt;/p&gt;
&lt;h1 id=&quot;div覆盖&quot;&gt;&lt;a href=&quot;#div覆盖&quot; class=&quot;header
    
    </summary>
    
      <category term="js" scheme="https://super3h.me/categories/js/"/>
    
    
      <category term="js" scheme="https://super3h.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC多解析器映射</title>
    <link href="https://super3h.me/2017/03/27/Spring%20MVC%E5%A4%9A%E8%A7%A3%E6%9E%90%E5%99%A8%E6%98%A0%E5%B0%84/"/>
    <id>https://super3h.me/2017/03/27/Spring MVC多解析器映射/</id>
    <published>2017-03-27T14:41:17.492Z</published>
    <updated>2017-05-28T10:10:24.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC多解析器映射"><a href="#Spring-MVC多解析器映射" class="headerlink" title="Spring MVC多解析器映射"></a>Spring MVC多解析器映射</h1><ul>
<li><p>MultipleResolver-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">   http://www.springframework.org/schema/beans    </div><div class="line">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">   http://www.springframework.org/schema/context </div><div class="line">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line">   </div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hhh"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span>   </div><div class="line">   </div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ResourceBundleViewResolver"</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"views"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">   </div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">   		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>order</code>属性定义了视图解析器的排序。<strong>0作为第一解析器，1作为下一解析器，等等。</strong></p>
</li>
<li><code>basename</code>的值<code>views</code>对应<code>src/views.properties</code>，里面内容如下，这里联合controller一起解释：</li>
<li><p>HelloController</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">printHello</span><span class="params">(Model model)</span></span>&#123;</div><div class="line">		model.addAttribute(<span class="string">"hello"</span>, <span class="string">"hello world"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>views.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello.(class)=org.springframework.web.servlet.view.JstlView</div><div class="line">hello.url=/WEB-INF/jsp/a.jsp</div></pre></td></tr></table></figure>
</li>
<li><p>对于/hello请求，DispatcherServlet会将请求转发到由views.properties中定义的hello对应的视图，也就是<code>/WEB-INF/jsp/a.jsp</code>，最后在a.jsp中显示。</p>
</li>
<li>这里“hello”是要匹配的视图名称。class指定视图类型，url是视图的位置。<blockquote>
<p>详情可参看<a href="http://www.yiibai.com/spring_mvc/springmvc_multiple_resolver_mapping.html" target="_blank" rel="external">Spring MVC多解析器映射</a></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-MVC多解析器映射&quot;&gt;&lt;a href=&quot;#Spring-MVC多解析器映射&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC多解析器映射&quot;&gt;&lt;/a&gt;Spring MVC多解析器映射&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Multi
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
      <category term="Spring" scheme="https://super3h.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC文件上传</title>
    <link href="https://super3h.me/2017/03/26/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://super3h.me/2017/03/26/SpringMVC文件上传/</id>
    <published>2017-03-26T13:35:24.388Z</published>
    <updated>2017-05-28T10:10:59.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC文件上传"><a href="#SpringMVC文件上传" class="headerlink" title="SpringMVC文件上传"></a>SpringMVC文件上传</h1><p>这里直接上代码：</p>
<ul>
<li>upload-servlet.xml<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">   xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">   xsi:schemaLocation="</div><div class="line">   http://www.springframework.org/schema/beans    </div><div class="line">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">   http://www.springframework.org/schema/context </div><div class="line">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line"></div><div class="line">   &lt;context:component-scan base-package="com.hhh" /&gt;</div><div class="line"></div><div class="line">   &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;</div><div class="line">      &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;</div><div class="line">      &lt;property name="suffix" value=".jsp" /&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line">   </div><div class="line">   &lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;</div><div class="line">   </div><div class="line">   &lt;/bean&gt;</div><div class="line">   </div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>CommonsMultipartResolver</code>文件上传所需的类，如若删去，会报如下错:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.NullPointerException</div></pre></td></tr></table></figure>
<p>定位到这一段:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileCopyUtils.copy(upload.getFile().getBytes(), <span class="keyword">new</span> File(storePath+<span class="string">"\\"</span>+file.getOriginalFilename()));</div></pre></td></tr></table></figure></p>
<p>debug调试可知，前端文件传不进来:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/26/SpringMVC文件上传/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<ul>
<li>FileUploadController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</div><div class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.domain.FIleUpload;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	ServletContext context;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/fileupload"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">fileUpload</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"fileupload"</span>,<span class="string">"command"</span>,<span class="keyword">new</span> FIleUpload());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/success"</span>,method=RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">fileUploadPage</span><span class="params">(FIleUpload upload,BindingResult result,ModelMap model)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		String realPath = context.getRealPath(<span class="string">""</span>);</div><div class="line">		String basePath = realPath.substring(<span class="number">0</span>,realPath.indexOf(<span class="string">"\\."</span>));</div><div class="line">		String storePath = basePath+File.separator+context.getContextPath().substring(context.getContextPath().indexOf(<span class="string">"/"</span>)+<span class="number">1</span>)+<span class="string">"\\upload"</span>;</div><div class="line">		<span class="keyword">if</span>(result.hasErrors())&#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"fileupload"</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			MultipartFile file = upload.getFile();</div><div class="line">            <span class="comment">//文件写入</span></div><div class="line">    	   FileCopyUtils.copy(upload.getFile().getBytes(), <span class="keyword">new</span> File(storePath+<span class="string">"\\"</span>+file.getOriginalFilename()));</div><div class="line">			String filename = file.getOriginalFilename();</div><div class="line">			model.addAttribute(<span class="string">"filename"</span>, filename);</div><div class="line">			<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>更详细的可参考<a href="http://www.cnblogs.com/fjsnail/p/3491033.html" target="_blank" rel="external">SpringMVC上传文件的三种方式</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC文件上传&quot;&gt;&lt;a href=&quot;#SpringMVC文件上传&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC文件上传&quot;&gt;&lt;/a&gt;SpringMVC文件上传&lt;/h1&gt;&lt;p&gt;这里直接上代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uplo
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
      <category term="SpringMVC" scheme="https://super3h.me/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC错误处理</title>
    <link href="https://super3h.me/2017/03/25/Spring%20MVC%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://super3h.me/2017/03/25/Spring MVC错误处理/</id>
    <published>2017-03-25T11:28:11.259Z</published>
    <updated>2017-05-28T10:10:30.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC错误处理"><a href="#Spring-MVC错误处理" class="headerlink" title="Spring MVC错误处理"></a>Spring MVC错误处理</h1><p>以下示例将如何在使用Spring Web MVC框架的表单中使用错误处理和验证器</p>
<h2 id="目录如下"><a href="#目录如下" class="headerlink" title="目录如下"></a>目录如下</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/1.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/1.png</div>
            </figure>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><ul>
<li><p>Person.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.domain;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>PersonValidator.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.domain.Person;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Person.class.isAssignableFrom(clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object obj, Errors errors)</span> </span>&#123;</div><div class="line">		ValidationUtils.rejectIfEmptyOrWhitespace(errors, <span class="string">"name"</span>, <span class="string">"name"</span>,<span class="string">"Field name is required."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>isAssignableFrom</code> 是用来<strong>判断一个类Class1和另一个类Class2是否相同或是另一个类的超类或接口。</strong><br>通常调用格式是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用者和参数都是   java.lang.Class   类型。</span></div><div class="line">Class1.isAssignableFrom (Class2)</div></pre></td></tr></table></figure>
</li>
<li><p><code>instanceof</code>   是用来<strong>判断一个对象实例是否是一个类或接口的或其子类子接口的实例。  </strong><br>  格式是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数是对象实例名，第二个参数是具体的类名或接口名 </span></div><div class="line">oo   <span class="keyword">instanceof</span>   TypeName</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>详情可看<a href="http://lucky16.iteye.com/blog/1631253" target="_blank" rel="external">Class.isAssignableFrom与 instanceof 区别</a></p>
</blockquote>
<ul>
<li>rejectIfEmptyOrWhitespace<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    Parameters:</div><div class="line">    errors - 错误实例</div><div class="line">    field - 被检验的字段</div><div class="line">    errorCode - 错误代号</div><div class="line">    defaultMessage - 出现错误时的提示消息</div><div class="line">    */</div><div class="line">rejectIfEmptyOrWhitespace(Errors errors,String field,String errorCode, String defaultMessage)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>详情案例可看此处<a href="http://www.shouce.ren/api/spring2.5/ch05s02.html" target="_blank" rel="external">使用Spring的Validator接口进行校验</a></p>
</blockquote>
<ul>
<li><p>PersonController.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.InitBinder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.hhh.domain.Person;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="keyword">new</span> Date().toString());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"personValidator"</span>)</div><div class="line">	<span class="keyword">private</span> Validator validator;</div><div class="line">	</div><div class="line">	<span class="meta">@InitBinder</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span></span>&#123;</div><div class="line">		binder.setValidator(validator);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/addPerson"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">person</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"person"</span>,<span class="string">"command"</span>,<span class="keyword">new</span> Person());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@ModelAttribute</span>(<span class="string">"person"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">createStudentModel</span><span class="params">()</span> </span>&#123;   </div><div class="line">		Person person = <span class="keyword">new</span> Person();</div><div class="line">		System.out.println(person);</div><div class="line">       <span class="keyword">return</span> person;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/showPerson"</span>,method=RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addPerson</span><span class="params">(@ModelAttribute(<span class="string">"person"</span>)</span> @Validated Person person,BindingResult bindingResult,Model model)</span>&#123;</div><div class="line">		<span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</div><div class="line">	         <span class="keyword">return</span> <span class="string">"person"</span>;</div><div class="line">		&#125;</div><div class="line">		model.addAttribute(<span class="string">"name"</span>, person.getName());</div><div class="line">	      model.addAttribute(<span class="string">"age"</span>, person.getAge());</div><div class="line">	      model.addAttribute(<span class="string">"id"</span>, person.getId());</div><div class="line"></div><div class="line">	      <span class="keyword">return</span> <span class="string">"result"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>@Qualifier</code> 注解和 <code>@Autowired</code> 注解通过指定哪一个真正的 bean 将会被装配来消除混乱。</p>
</li>
<li><p><code>WebDataBinder</code>是用来绑定请求参数到指定的属性编辑器.<strong>由于前台传到controller里的值是String类型的，当往Model里Set这个值的时候，如果set的这个属性是个对象，Spring就会去找到对应的editor进行转换，然后再SET进去。</strong>在需要日期转换的Controller中也会使用SpringMVC的注解@initbinder和Spring自带的WebDateBinder类来操作。可参考<a href="http://www.cnblogs.com/aheizi/p/5440884.html" target="_blank" rel="external">SpringMVC注解@initbinder解决类型转换问题</a></p>
</li>
<li><code>Model</code> 是一个接口， <strong>其实现类为ExtendedModelMap，继承了ModelMap类。</strong> </li>
<li><code>ModelMap</code>:ModelMap对象主要<strong>用于传递控制方法处理数据到结果页面</strong>，也就是说我们把结果页面上需要的数据放到ModelMap对象中即可，<strong>他的作用类似于request对象的setAttribute方法的作用，用来在一个请求过程中传递处理的数据。</strong>通过以下方法向页面传递参数：<br><code>addAttribute(String key,Object value);</code><br>在页面上可以通过el变量方式$key或者bboss的一系列数据展示标签获取并展示modelmap中的数据。<strong>modelmap本身不能设置页面跳转的url地址别名或者物理跳转地址，那么我们可以通过控制器方法的返回值来设置跳转url地址别名或者物理跳转地址。</strong></li>
<li><code>ModelAndView</code><br>ModelAndView对象有两个作用：</li>
</ul>
<ul>
<li><p>设置转向地址,如下所示（这也是ModelAndView和ModelMap的主要区别）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ModelAndView view = <span class="keyword">new</span> ModelAndView(<span class="string">"path:ok"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>用于传递控制方法处理结果数据到结果页面，也就是说<strong>我们把需要在结果页面上需要的数据放到ModelAndView对象中即可，他的作用类似于request对象的setAttribute方法的作用，用来在一个请求过程中传递处理的数据</strong>。通过以下方法向页面传递参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addObject(String key,Object value);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在页面上可以通过el变量方式$key或者bboss的一系列数据展示标签获取并展示ModelAndView中的数据。</p>
<ul>
<li><code>注意:</code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"person"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">createStudentModel</span><span class="params">()</span> </span>&#123;   </div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        System.out.println(person);</div><div class="line">       <span class="keyword">return</span> person;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这段代码必须配合前台jsp中的<code>commandName=&quot;person&quot;</code>一起使用，否则会报错</p>
<blockquote>
<p>以下这段错误处理，也必须配合以上的两者一起使用，否则会报错 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Neither BindingResult nor plain target object for bean name &apos;command&apos; available as request attribute</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</div><div class="line">	         <span class="keyword">return</span> <span class="string">"person"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过实验发现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@ModelAttribute("person")可改为@ModelAttribute，也能获取前台数据，和createStudentModel()方法无关</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPerson</span><span class="params">(@ModelAttribute(<span class="string">"person"</span>)</span> @Validated Person person,BindingResult bindingResult,Model model)</span>&#123;</div><div class="line">		<span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</div><div class="line">	         <span class="keyword">return</span> <span class="string">"person"</span>;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>person.jsp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.error &#123;</div><div class="line">    color: #ff0000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.errorStyle &#123;</div><div class="line">    color: #000;</div><div class="line">    background-color: #ffEEEE;</div><div class="line">    border: 3px solid #ff0000;</div><div class="line">    padding: 8px;</div><div class="line">    margin: 16px;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">    &lt;h2&gt;学生信息&lt;/h2&gt;</div><div class="line">    &lt;form:form method="POST" action="$&#123;pageContext.request.contextPath &#125;/showPerson"</div><div class="line">        commandName="person"&gt;</div><div class="line">        &lt;form:errors path="*" cssClass="errorStyle" element="div" /&gt;</div><div class="line">        &lt;table&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;&lt;form:label path="name"&gt;姓名：&lt;/form:label&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;form:input path="name" /&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;form:errors path="name" cssClass="error" /&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;&lt;form:label path="age"&gt;年龄：&lt;/form:label&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;form:input path="age" /&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;&lt;form:label path="id"&gt;编号：&lt;/form:label&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;form:input path="id" /&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td colspan="2"&gt;&lt;input type="submit" value="提交" /&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/table&gt;</div><div class="line">    &lt;/form:form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>result.jsp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;Submitted Student Information&lt;/h2&gt;</div><div class="line">   &lt;table&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;姓名：&lt;/td&gt;</div><div class="line">        &lt;td&gt;$&#123;name&#125;&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;年龄：&lt;/td&gt;</div><div class="line">        &lt;td&gt;$&#123;age&#125;&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;编号：&lt;/td&gt;</div><div class="line">        &lt;td&gt;$&#123;id&#125;&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">&lt;/table&gt;  </div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>这里想看hibernate验证器可点击<a href="http://www.yiibai.com/spring_mvc/springmvc_hibernate_validator.html" target="_blank" rel="external">Spring MVC Hibernate验证器</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>springmvc中控制器，即我们的<code>PersonController</code>为单例</p>
<h2 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h2><p>通过debug调试得知 当输入<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/2.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/2.png</div>
            </figure><br>先跳转到<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/3.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/3.png</div>
            </figure><br>在之后<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/4.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/4.png</div>
            </figure><br>设置我们的验证器，并获取<code>ServletRequestDataBinder</code>对象</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/5.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/5.png</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/6.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/6.png</div>
            </figure>
<p>当我们提交后：然后继续进入<code>createStudentModel</code>和<code>initBinder</code>，在之后进入:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/7.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/7.png</div>
            </figure><br>可以看出我们的错误:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/8.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/8.png</div>
            </figure><br>之后报错:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/25/Spring MVC错误处理/Spring" alt="MVC错误处理/9.png" title="">
                </div>
                <div class="image-caption">MVC错误处理/9.png</div>
            </figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</div><div class="line">	         <span class="keyword">return</span> <span class="string">"person"</span>;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>返回的<code>person</code>，跳到<code>person.jsp</code>，并显示错误!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-MVC错误处理&quot;&gt;&lt;a href=&quot;#Spring-MVC错误处理&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC错误处理&quot;&gt;&lt;/a&gt;Spring MVC错误处理&lt;/h1&gt;&lt;p&gt;以下示例将如何在使用Spring Web M
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
      <category term="Spring" scheme="https://super3h.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Python的with 语句</title>
    <link href="https://super3h.me/2017/03/25/Python%E7%9A%84with%20%E8%AF%AD%E5%8F%A5/"/>
    <id>https://super3h.me/2017/03/25/Python的with 语句/</id>
    <published>2017-03-25T04:47:09.357Z</published>
    <updated>2017-05-28T10:05:59.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>with 语句是被设计用来简化“try / finally”语句的。</strong>通常的用处在于共享资源的获取和释放，比如文件、数据库和线程资源。它的用法如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> context_exp [<span class="keyword">as</span> var]:</div><div class="line">    with_suit</div></pre></td></tr></table></figure></p>
<h1 id="with-语句解释"><a href="#with-语句解释" class="headerlink" title="with 语句解释"></a>with 语句解释</h1><p>with 语句也是复合语句的一种，就像 if、try 一样，它的后面也有个“：”，并且紧跟一个缩进的代码块 <code>with_suit</code>。 <code>context_exp</code> 表达式的作用是提供一个上下文管理器（Context Manager），整个 with_suit 代码块都是在这个上下文管理器的运行环境下执行的。<strong>context_exp 可以直接是一个上下文管理器的引用，也可以是一句可执行的表达式，with 语句会自动执行这个表达式以获得上下文管理对象。</strong>with 语句的实际执行流程是这样的：</p>
<ol>
<li>执行 <code>context_exp</code> 以获取上下文管理器</li>
<li>加载上下文管理器的<code>__exit__()</code> 方法以备稍后调用</li>
<li>调用上下文管理器的 <code>__enter__()</code> 方法</li>
<li>如果有 as var 从句，则将 <code>__enter__()</code> 方法的返回值赋给 var</li>
<li>执行子代码块<code>with_suit</code></li>
<li>调用上下文管理器的<code>__exit__()</code> 方法，如果 with_suit 的退出是由异常引发的，那么该异常的 type、value 和 traceback 会作为参数传给 <code>__exit__()</code>，否则传三个 None</li>
<li>如果 <code>with_suit</code> 的退出由异常引发，并且 <code>__exit__()</code>的返回值等于 False，那么这个异常将被重新引发一次；如果 <code>__exit__()</code>的返回值等于 True，那么这个异常就被无视掉，继续执行后面的代码</li>
</ol>
<h1 id="原文参考"><a href="#原文参考" class="headerlink" title="原文参考"></a>原文参考</h1><p>更详细内容请看:<a href="https://my.oschina.net/lionets/blog/196197" target="_blank" rel="external">Python 中的 with 语句与上下文管理器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;with 语句是被设计用来简化“try / finally”语句的。&lt;/strong&gt;通常的用处在于共享资源的获取和释放，比
    
    </summary>
    
      <category term="Python" scheme="https://super3h.me/categories/Python/"/>
    
    
      <category term="Python2" scheme="https://super3h.me/tags/Python2/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC表单</title>
    <link href="https://super3h.me/2017/03/24/SpringMVC%E8%A1%A8%E5%8D%95/"/>
    <id>https://super3h.me/2017/03/24/SpringMVC表单/</id>
    <published>2017-03-24T13:05:56.716Z</published>
    <updated>2017-05-28T10:11:04.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC表单"><a href="#SpringMVC表单" class="headerlink" title="SpringMVC表单"></a>SpringMVC表单</h1><h2 id="过程中所遇问题"><a href="#过程中所遇问题" class="headerlink" title="过程中所遇问题"></a>过程中所遇问题</h2><blockquote>
<p>报错如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The request sent by the client was syntactically incorrect.</div></pre></td></tr></table></figure>
<p>前台提交form，tomcat返回 http status 400   The request sent by the client was syntactically incorrect，控制台无任何错误输出。</p>
<ul>
<li><code>原因:</code><strong>这是因为前台form表单中的某些参数 和 后台接受的参数类型不一致导致的。即参数名称相同，但是类型不一致。spring mvc在绑定参数的时候出现异常，所以返回400错误。但是坑爹的地方在于，这个异常会被spring mvc吃掉，不会显示在控制台中。</strong></li>
<li><code>解决办法:</code><strong>检查form表单中的参数和后台的参数对应，看是否有参数名相同但是类型不一致的情况。或者把当前日志设为debug 级别，然后在日志中即可看到spring 抛出的异常信息，即可发现哪个参数出现了错误。</strong><blockquote>
<p>详细内容可参考:<a href="https://my.oschina.net/building/blog/137824" target="_blank" rel="external">Spring MVC 遇到的问题集锦</a></p>
</blockquote>
</li>
</ul>
<h2 id="关于-ModelAttribute注解"><a href="#关于-ModelAttribute注解" class="headerlink" title="关于@ModelAttribute注解"></a>关于@ModelAttribute注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/addStudent"</span>,method=RequestMethod.POST)</div><div class="line">	   <span class="function"><span class="keyword">public</span> String <span class="title">addStudent</span><span class="params">(@ModelAttribute Student student,ModelMap model)</span> </span>&#123;</div><div class="line">	      model.addAttribute(<span class="string">"name"</span>, student.getName());</div><div class="line">	      model.addAttribute(<span class="string">"age"</span>, student.getAge());</div><div class="line">	      model.addAttribute(<span class="string">"id"</span>, student.getId());      </div><div class="line">	      <span class="keyword">return</span> <span class="string">"result"</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在这个例子里，<code>@ModelAttribute User user</code>中<code>@ModelAttribute</code>将前台表单的值封装到user中</p>
<blockquote>
<p>更详细的内容:<a href="http://blog.csdn.net/li_xiao_ming/article/details/8349115" target="_blank" rel="external">spring学习之@ModelAttribute运用详解</a></p>
</blockquote>
<h2 id="ModelAndView对象解析"><a href="#ModelAndView对象解析" class="headerlink" title="ModelAndView对象解析"></a>ModelAndView对象解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/asstudent"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showStudent</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"student"</span>,<span class="string">"command"</span>,<span class="keyword">new</span> Student());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>解析<code>ModelAndView</code>对象，我们从源码入手</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Convenient constructor to take a single model object.</div><div class="line">	 * <span class="doctag">@param</span> viewName name of the View to render, to be resolved</div><div class="line">	 * by the DispatcherServlet's ViewResolver</div><div class="line">	 * <span class="doctag">@param</span> modelName name of the single entry in the model</div><div class="line">	 * <span class="doctag">@param</span> modelObject the single model object</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ModelAndView</span><span class="params">(String viewName, String modelName, Object modelObject)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.view = viewName;</div><div class="line">		addObject(modelName, modelObject);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>官方文档说的很清楚，第一个<code>String</code>参数为返回的视图名，也就是说:<strong>我们访问 localhost:8080/项目名/asstudent Spring 会根据视图名跳转到<code>/WEB-INF/jsp/viewName.jsp</code></strong>，<code>modelName</code>:<strong>所需要封装的参数名</strong>，<code>modelObject</code>:<strong>所需封装的对象</strong><br><code>注意:</code><strong><font color="#DB7676">modelName必须使用’command’ ，因为如果在JSP文件中使用<code>&lt;form:form&gt;</code>标签，spring框架需要一个名称为“command”的对象</font></strong></p>
<h1 id="SpringMVC静态页面"><a href="#SpringMVC静态页面" class="headerlink" title="SpringMVC静态页面"></a>SpringMVC静态页面</h1><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/staticPage"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"redirect:/aaa/final.html"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;mvc:resources location=<span class="string">"/WEB-INF/pages/"</span> mapping=<span class="string">"/aaa/**"</span>/&gt;</div><div class="line">&lt;mvc:annotation-driven /&gt;</div></pre></td></tr></table></figure>
<p>当访问 <code>/staticPage</code> 时，根据返回值 <code>redirect:/aaa/final.html</code> 重定向到 <code>/aaa/final.html</code> ，由配置文件知 <code>/aaa/**</code> 映射到 <code>/WEB-INF/pages/</code> ，所以最后找到<code>/WEB-INF/pages/final.html</code>。</p>
<h2 id="lt-mvc-annotation-driven-gt"><a href="#lt-mvc-annotation-driven-gt" class="headerlink" title="&lt;mvc:annotation-driven/&gt;"></a><code>&lt;mvc:annotation-driven/&gt;</code></h2><p><code>&lt;mvc:annotation-driven/&gt;</code>是告知Spring，我们启用注解驱动。然后Spring会自动为我们注册上面说到的几个Bean到工厂中，来处理我们的请求。</p>
<blockquote>
<p>详情可看:<a href="https://my.oschina.net/HeliosFly/blog/205343" target="_blank" rel="external">Spring MVC 解读——<code>&lt;mvc:annotation-driven/&gt;</code></a>，作者讲的非常清晰</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC表单&quot;&gt;&lt;a href=&quot;#SpringMVC表单&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC表单&quot;&gt;&lt;/a&gt;SpringMVC表单&lt;/h1&gt;&lt;h2 id=&quot;过程中所遇问题&quot;&gt;&lt;a href=&quot;#过程中所遇问题&quot; c
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
      <category term="SpringMVC" scheme="https://super3h.me/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC初学</title>
    <link href="https://super3h.me/2017/03/24/SpringMVC%E5%88%9D%E5%AD%A6/"/>
    <id>https://super3h.me/2017/03/24/SpringMVC初学/</id>
    <published>2017-03-24T06:24:22.452Z</published>
    <updated>2017-05-28T10:10:55.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC框架介绍"><a href="#SpringMVC框架介绍" class="headerlink" title="SpringMVC框架介绍"></a>SpringMVC框架介绍</h1><blockquote>
<p>Spring的MVC框架主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。</p>
</blockquote>
<h1 id="SpringMVC原理图"><a href="#SpringMVC原理图" class="headerlink" title="SpringMVC原理图"></a>SpringMVC原理图</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/24/SpringMVC初学/1.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><code>1.Http请求：</code> 客户端请求提交到DispatcherServlet。 </li>
<li><code>2.寻找处理器：</code>由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。</li>
<li><code>3.调用处理器：</code>DispatcherServlet将请求提交到Controller。 </li>
<li><code>4、5、调用业务处理和返回结果：</code>Controller调用业务逻辑处理后，返回ModelAndView。 </li>
<li><code>6、7、处理视图映射并返回模型：</code> DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。 </li>
<li><code>8.Http响应：</code>视图负责将结果显示到客户端。</li>
</ul>
<h1 id="SpringMVC接口解释"><a href="#SpringMVC接口解释" class="headerlink" title="SpringMVC接口解释"></a>SpringMVC接口解释</h1><ul>
<li><code>DispatcherServlet接口：</code><pre><code>&lt;font color=&apos;#48B492&apos;&gt;Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。&lt;/font&gt;
</code></pre></li>
<li><code>HandlerMapping接口：</code><pre><code>&lt;font color=&apos;#48B492&apos;&gt;能够完成客户请求到Controller映射。&lt;/font&gt;
</code></pre></li>
<li><code>Controller接口：</code><pre><code>&lt;font color=&apos;#48B492&apos;&gt;需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。
Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。
从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。&lt;/font&gt;
</code></pre></li>
<li><code>ViewResolver接口：</code><pre><code>&lt;font color=&apos;#48B492&apos;&gt;Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。&lt;/font&gt;
</code></pre></li>
</ul>
<h1 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h1><blockquote>
<p>DispatcherServlet是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。其主要工作有以下三项：</p>
</blockquote>
<ol>
<li>截获符合特定格式的URL请求。</li>
<li>初始化DispatcherServlet上下文对应的WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。</li>
<li>初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。</li>
</ol>
<h1 id="web-xml配置解释"><a href="#web-xml配置解释" class="headerlink" title="web-xml配置解释"></a>web-xml配置解释</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SpringMVC_day01<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWeb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/spring/HelloWeb-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWeb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>init-param:</code><ul>
<li>HelloWeb DispatcherServlet初始化时，框架将尝试从位于应用程序的WebContent/WEB-INF目录中的名为[servlet-name]-servlet.xml的文件加载应用程序上下文。</li>
<li>这里我们配置此参数，让其从<code>WEB-INF/spring/HelloWeb-servlet.xml</code>下读取配置文件</li>
</ul>
</li>
<li><code>load-on-startup:</code><ul>
<li>当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；</li>
<li>当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。</li>
<li>正数的值越小，启动该servlet的优先级越高</li>
</ul>
</li>
</ul>
<h1 id="HelloWeb-servlet-xml"><a href="#HelloWeb-servlet-xml" class="headerlink" title="HelloWeb-servlet.xml"></a>HelloWeb-servlet.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">   http://www.springframework.org/schema/beans     </div><div class="line">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">   http://www.springframework.org/schema/context </div><div class="line">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yiibai"</span> /&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>以下是有关<code>HelloWeb-servlet.xml</code>文件的重点说明：</p>
</blockquote>
<ol>
<li><code>[servlet-name]-servlet.xml</code>文件将用于创建定义的<code>bean</code>，它会覆盖在全局范围中使用相同名称定义的任何<code>bean</code>的定义</li>
<li><code>&lt;context：component-scan ...&gt;</code>标签将用于激活Spring MVC注释扫描功能，允许使用<code>@Controller和@RequestMapping</code>等注释。</li>
<li><code>InternalResourceViewResolver</code>将定义用于解析视图名称的规则。<code>prefix</code>：定位文件所在位置，<code>suffix:</code>文件后缀。根据上面定义的规则，<code>hello</code>的逻辑视图将委托给位于<code>/WEB-INF/jsp/hello.jsp</code>这个视图来实现。</li>
</ol>
<h1 id="Controller解释"><a href="#Controller解释" class="headerlink" title="Controller解释"></a>Controller解释</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.springmvc;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">printHello</span><span class="params">(ModelMap modelMap)</span></span>&#123;</div><div class="line">		modelMap.put(<span class="string">"message"</span>, <span class="string">"hello spring mvc"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>@Controller</code>注释将类定义为Spring MVC控制器。这里<code>@RequestMapping</code>的第一个用法表示此控制器上的所有处理方法都与<code>/hello</code>路径相关。 下一个注释<code>@RequestMapping(method = RequestMethod.GET)</code>用于声明<code>printHello()</code>方法作为控制器的默认服务方法来处理HTTP GET请求。可以定义另一个方法来处理同一URL的任何POST请求。<br>可以以另一种形式在上面的控制器中编写，在<code>@RequestMapping</code>中添加其他属性，如下所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hhh.springmvc;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">printHello</span><span class="params">(ModelMap modelMap)</span></span>&#123;</div><div class="line">		modelMap.put(<span class="string">"message"</span>, <span class="string">"hello spring mvc"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>value</code>属性<strong><font color="#D55555">指示处理程序方法映射到的URL，method属性定义处理HTTP GET请求的服务方法。关于以上定义的控制器，需要注意以下几点：</font></strong><ul>
<li><strong><font color="#808080">在服务方法中定义所需的业务逻辑。可以根据需要在此方法内调用其他方法</font></strong></li>
<li><strong><font color="#808080">基于定义的业务逻辑，将在此方法中创建一个模型。可以设置不同的模型属性，这些属性将被视图访问以呈现最终结果。此示例创建且有属性“<code>message</code>”的模型。</font></strong></li>
<li><strong><font color="#808080">定义的服务方法可以返回一个String，它包含要用于渲染模型的视图的名称。此示例将“hello”返回为逻辑视图名称。</font></strong></li>
</ul>
</li>
</ul>
<h1 id="创建JSP视图"><a href="#创建JSP视图" class="headerlink" title="创建JSP视图"></a>创建JSP视图</h1><blockquote>
<p>Spring MVC支持许多类型的视图用于不同的表示技术。<strong>包括 - JSP，HTML，PDF，Excel工作表，XML，Velocity模板，XSLT，JSON，Atom 和 RSS 源，JasperReports等。但最常见的是使用JSPL编写的JSP模板</strong>，这里使用的是JSP模板，并在<code>/WEB-INF/hello/hello.jsp</code>中写一个简单的hello视图：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Spring MVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里<code>${message}</code>是在<code>Controller</code>中设置的属性。可以在视图中显示多个属性。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://blog.csdn.net/jianyuerensheng/article/details/51258942" target="_blank" rel="external">【Spring】Spring MVC原理及配置详解</a><br><a href="http://blog.csdn.net/liang5630/article/details/43733733" target="_blank" rel="external">SpringMVC工作原理</a><br><a href="http://www.yiibai.com/spring_mvc/springmvc_overview.html" target="_blank" rel="external">Spring MVC概述</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC框架介绍&quot;&gt;&lt;a href=&quot;#SpringMVC框架介绍&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC框架介绍&quot;&gt;&lt;/a&gt;SpringMVC框架介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring的MVC框架主
    
    </summary>
    
      <category term="spring" scheme="https://super3h.me/categories/spring/"/>
    
    
      <category term="SpringMVC" scheme="https://super3h.me/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>python的字节与字符</title>
    <link href="https://super3h.me/2017/03/23/python%E7%9A%84%E5%AD%97%E8%8A%82%E4%B8%8E%E5%AD%97%E7%AC%A6/"/>
    <id>https://super3h.me/2017/03/23/python的字节与字符/</id>
    <published>2017-03-23T01:05:55.623Z</published>
    <updated>2017-05-28T10:06:08.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="str与unicode"><a href="#str与unicode" class="headerlink" title="str与unicode"></a>str与unicode</h1><blockquote>
<p>Python2 把字符串分为 unicode 和 str 两种类型。本质上 str 是一串二进制字节序列，下面的示例代码可以看出 str 类型的 “禅” 打印出来是十六进制的 \xec\xf8 ，对应的二进制字节序列就是 ‘11101100 11111000’。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'禅'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'\xec\xf8'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>而 unicode 类型的 u”禅” 对应的 unicode 符号是 u’\u7985’</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>u = <span class="string">u"禅"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u</div><div class="line"><span class="string">u'\u7985'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(u)</div><div class="line">&lt;type <span class="string">'unicode'</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们要把 unicode 符号保存到文件或者传输到网络就需要经过编码处理转换成 str 类型，于是 python 提供了 encode 方法，从 unicode 转换到 str，反之亦然。</p>
</blockquote>
<h1 id="encode与decode"><a href="#encode与decode" class="headerlink" title="encode与decode"></a>encode与decode</h1><ul>
<li><p>encode</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>u = <span class="string">u"禅"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u</div><div class="line"><span class="string">u'\u7985'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u.encode(<span class="string">"utf-8"</span>)</div><div class="line"><span class="string">'\xe7\xa6\x85'</span></div></pre></td></tr></table></figure>
</li>
<li><p>decode</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"禅"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.decode(<span class="string">"utf-8"</span>)</div><div class="line"><span class="string">u'\u7985'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>unicode 到 str 的转换要用 encode 方法，反过来就是用 decode 方法</p>
</blockquote>
<h1 id="UnicodeEncodeError"><a href="#UnicodeEncodeError" class="headerlink" title="UnicodeEncodeError"></a>UnicodeEncodeError</h1><blockquote>
<p>UnicodeEncodeError 发生在 unicode 字符串转换成 str 字节序列的时候，来看一个例子，把一串 unicode 字符串保存到文件</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    name = <span class="string">u'Python之禅'</span></div><div class="line">    f = open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>)</div><div class="line">    f.write(name)</div><div class="line"></div><div class="line"><span class="comment"># 错误如下</span></div><div class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 6-7: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>原因:</code><font color="#E7C800">因为调用 write 方法时，Python 会先判断字符串是什么类型，如果是 str，就直接写入文件，不需要编码，因为 str 类型的字符串本身就是一串二进制的字节序列了。</font></p>
<p><font color="#008AE2">如果字符串是 unicode 类型，那么它会先调用 encode 方法把 unicode 字符串转换成二进制形式的 str 类型，才保存到文件，而 encode 方法会使用 python 默认的 ascii 码来编码</font><br>相当于：</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u"Python之禅"</span>.encode(<span class="string">"ascii"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>但是，<strong>我们知道 ASCII 字符集中只包含了128个拉丁字母，不包括中文字符</strong>，因此 出现了 ‘ascii’ codec can’t encode characters 的错误。要正确地使用 encode ，就必须指定一个包含了中文字符的字符集，比如：UTF-8、GBK。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u"Python之禅"</span>.encode(<span class="string">"utf-8"</span>)</div><div class="line"><span class="string">'Python\xe4\xb9\x8b\xe7\xa6\x85'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u"Python之禅"</span>.encode(<span class="string">"gbk"</span>)</div><div class="line"><span class="string">'Python\xd6\xae\xec\xf8'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>所以要把 unicode 字符串正确地写入文件，就应该预先把字符串进行 UTF-8 或 GBK 编码转换。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    name = <span class="string">u'Python之禅'</span></div><div class="line">    name = name.encode(<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(name)</div></pre></td></tr></table></figure>
<h1 id="UnicodeDecodeError"><a href="#UnicodeDecodeError" class="headerlink" title="UnicodeDecodeError"></a>UnicodeDecodeError</h1><blockquote>
<p>UnicodeDecodeError 发生在 str 类型的字节序列解码成 unicode 类型的字符串时</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">u"禅"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="string">u'\u7985'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.encode(<span class="string">"utf-8"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'\xe7\xa6\x85'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.decode(<span class="string">"gbk"</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">UnicodeDecodeError: <span class="string">'gbk'</span> codec can<span class="string">'t decode byte 0x85 in position 2: incomplete multibyte sequence</span></div></pre></td></tr></table></figure>
<blockquote>
<font color="#E77575">把一个经过 UTF-8 编码后生成的字节序列 ‘\xe7\xa6\x85’ 再用 GBK 解码转换成 unicode 字符串时，出现 UnicodeDecodeError，因为 （对于中文字符）GBK 编码只占用两个字节，而 UTF-8 占用3个字节，用 GBK 转换时，还多出一个字节，因此它没法解析。避免 UnicodeDecodeError 的关键是保持 编码和解码时用的编码类型一致。</font>

<p>再举一个 UnicodeDecodeError 的例子</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = u"Python"</div><div class="line">&gt;&gt;&gt; y = "之禅"</div><div class="line">&gt;&gt;&gt; x + y</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</div><div class="line">UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<font color="#8AB475">str 与 unicode 字符串 执行 + 操作是，Python 会把 str 类型的字节序列隐式地转换成（解码）成 和 x 一样的 unicode 类型，但Python是使用默认的 ascii 编码来转换的，而 ASCII 中不包含中文，所以报错了。</font>

</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>y.decode(<span class="string">'ascii'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<blockquote>
<p>正确地方式应该是显示地把 y 用 UTF-8 或者 GBK 进行解码。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">u"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="string">"之禅"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = y.decode(<span class="string">"utf-8"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x + y</div><div class="line"><span class="string">u'Python\u4e4b\u7985'</span></div></pre></td></tr></table></figure>
<h1 id="原文参考"><a href="#原文参考" class="headerlink" title="原文参考"></a>原文参考</h1><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/25924333" target="_blank" rel="external">Python 编码为什么那么蛋疼？</a>，感谢作者让我理解了一直困惑我的问题！！！<br><a href="https://my.oschina.net/leejun2005/blog/74430" target="_blank" rel="external">详解 python 中文编码与处理</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;str与unicode&quot;&gt;&lt;a href=&quot;#str与unicode&quot; class=&quot;headerlink&quot; title=&quot;str与unicode&quot;&gt;&lt;/a&gt;str与unicode&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Python2 把字符串分为 unicod
    
    </summary>
    
      <category term="Python" scheme="https://super3h.me/categories/Python/"/>
    
    
      <category term="Python2" scheme="https://super3h.me/tags/Python2/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-爬取学校官网</title>
    <link href="https://super3h.me/2017/03/19/%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E5%AE%98%E7%BD%91/"/>
    <id>https://super3h.me/2017/03/19/爬虫-爬取学校官网/</id>
    <published>2017-03-19T14:40:10.986Z</published>
    <updated>2017-05-28T10:16:48.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>之前断断续续的学习爬虫，结果忘得差不多了，现在重新开始认真学，公众号也要认真弄了，之前做了就一直没管  哈哈  就图个装逼！！</p>
</blockquote>
<h1 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/19/爬虫-爬取学校官网/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>正常的登录界面，可以写出以下代码:</p>
</blockquote>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 传入对应用户名(studentnumber),密码(password),学校官网(schoolURL)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,studentnumber,password,schoolURL)</span>:</span></div><div class="line">        self.studentnumber = studentnumber</div><div class="line">        self.password = password</div><div class="line">        self.schoolURL = schoolURL</div><div class="line">        resp = requests.get(schoolURL)</div><div class="line">        self.sl = etree.HTML(resp.content)</div></pre></td></tr></table></figure>
<blockquote>
<p>接下来就是验证码了，由于并没有找到好的库来识别验证码，就采用人工输入好了，就像超级课程表那样</p>
</blockquote>
<h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#拿到图片</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCheckCode</span><span class="params">(self)</span>:</span></div><div class="line">        imgURL = self.schoolURL+<span class="string">'/CheckCode.aspx'</span></div><div class="line">        imgResp = requests.get(imgURL, stream=<span class="keyword">True</span>)</div><div class="line">        image = imgResp.content</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">with</span> open(<span class="string">'code.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                f.write(image)</div><div class="line">        <span class="keyword">except</span> IOError,e:</div><div class="line">            print(<span class="string">"IO Error:%s"</span> % e)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            f.close()</div></pre></td></tr></table></figure>
<blockquote>
<p>拿到图片，并下载到本地</p>
</blockquote>
<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/19/爬虫-爬取学校官网/2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>由图可知所需发送的数据:</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(self,checkCode)</span>:</span></div><div class="line">        VIEWSTATE = self.sl.xpath(<span class="string">'//input[@name="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</div><div class="line">        VIEWSTATEGENERATOR = self.sl.xpath(<span class="string">'//input[@name="__VIEWSTATEGENERATOR"]/@value'</span>)[<span class="number">0</span>]</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">'__VIEWSTATE'</span>: VIEWSTATE,</div><div class="line">            <span class="string">'__VIEWSTATEGENERATOR'</span>: VIEWSTATEGENERATOR,</div><div class="line">            <span class="string">'txtUserName'</span>: self.studentnumber,</div><div class="line">            <span class="string">'Textbox1'</span>: <span class="string">''</span>,</div><div class="line">            <span class="string">'Textbox2'</span>: self.password,</div><div class="line">            <span class="string">'txtSecretCode'</span>: checkCode,</div><div class="line">            <span class="string">'RadioButtonList1'</span>:<span class="string">u'学生'</span>.encode(<span class="string">'gb2312'</span>),</div><div class="line">            <span class="string">'Button1'</span>:<span class="string">''</span>,</div><div class="line">            <span class="string">'lbLanguage'</span>:<span class="string">''</span>,</div><div class="line">            <span class="string">'hidPdrs'</span>:<span class="string">''</span>,</div><div class="line">            <span class="string">'hidsc'</span>:<span class="string">''</span></div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> data</div></pre></td></tr></table></figure>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><blockquote>
<p>登录并拿到登陆者的姓名</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/19/爬虫-爬取学校官网/3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,checkCode)</span>:</span>    </div><div class="line">        headers = &#123;</div><div class="line">            <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36"</span>,</div><div class="line">        &#125;</div><div class="line">        data = self.getData(checkCode)</div><div class="line">        <span class="comment">#登陆教务系统</span></div><div class="line">        response = requests.post(self.schoolURL,data=data,headers=headers)</div><div class="line">        successSl = etree.HTML((response.content).decode(<span class="string">'gb2312'</span>))</div><div class="line"><span class="comment">#         print response.encoding</span></div><div class="line"><span class="comment">#       去除登陆者姓名同学两字(xxx同学)</span></div><div class="line">        self.name = successSl.xpath(<span class="string">'//span[@id="xhxm"]/text()'</span>)[<span class="number">0</span>][:<span class="number">-2</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>登录，并拿到登录者姓名</p>
</blockquote>
<h2 id="进入课表页面"><a href="#进入课表页面" class="headerlink" title="进入课表页面"></a>进入课表页面</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/19/爬虫-爬取学校官网/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可知queryString为tjkbcx.aspx?xh=2014115010127&amp;xm=黄辉辉&amp;gnmkdm=N121601，代码如下:</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCourse</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#tjkbcx.aspx?xh=2014115010127&amp;xm=黄辉辉&amp;gnmkdm=N121601</span></div><div class="line">        courseString = &#123;</div><div class="line">            <span class="string">'xh'</span>:self.studentnumber,</div><div class="line">            <span class="string">'xm'</span>:self.name,</div><div class="line">            <span class="string">'gnmkdm'</span>:<span class="string">'N121601'</span></div><div class="line">        &#125;</div><div class="line">        baseURL = <span class="string">"tjkbcx.aspx?%s"</span> % urllib.urlencode(courseString)</div><div class="line">        courseURL = self.schoolURL+baseURL</div><div class="line"><span class="comment">#         print courseURL</span></div><div class="line">        <span class="comment">#必须要有Referer这个参数，否者跳到登录页面</span></div><div class="line">        headers = &#123;</div><div class="line">        <span class="string">"Referer"</span>:<span class="string">"http://www.jwgl.hbnu.edu.cn/(qsyyr145roe1hwvyfoylp445)/default2.aspx"</span>,</div><div class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>,</div><div class="line">         &#125;</div><div class="line">        contents =  resp.content.decode(<span class="string">'gb2312'</span>)</div><div class="line">        sl = etree.HTML(contents)</div><div class="line">        <span class="keyword">for</span> course <span class="keyword">in</span> sl.xpath(<span class="string">'//td/text()'</span>):</div><div class="line">            <span class="keyword">print</span> course</div></pre></td></tr></table></figure>
<blockquote>
<p>由于表格样式不好调试，可以通过截屏拿到课表</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">driver = webdriver.PhantomJS()</div><div class="line">driver.get(courseURL)</div><div class="line">driver.save_screenshot(<span class="string">"course.jpg"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>由于缺少请求头，上网查后发现:</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = (</div><div class="line">         <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">  )</div><div class="line">driver = webdriver.PhantomJS(desired_capabilities=dcap)</div></pre></td></tr></table></figure>
<blockquote>
<p>由于请求头还缺少<code>referer</code>，导致跳转到登录页面，最后截图成了登录页面。。。。我也是醉了，找了我一下午，还没找到，有网友找到后，请告知，谢啦！！</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/19/爬虫-爬取学校官网/course.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h1><blockquote>
<p>解决中文编码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sel.xpath(<span class="string">u"//h2[text()= 'xx']"</span>)</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://blog.csdn.net/nghuyong/article/details/51622888" target="_blank" rel="external">python爬虫正方教务系统</a><br><a href="http://www.jianshu.com/p/2631bf34328e" target="_blank" rel="external">爬虫：3. selenium</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前断断续续的学习爬虫，结果忘得差不多了，现在重新开始认真学，公众号也要认真弄了，之前做了就一直没管  哈哈  就
    
    </summary>
    
      <category term="Python" scheme="https://super3h.me/categories/Python/"/>
    
    
      <category term="Python 爬虫" scheme="https://super3h.me/tags/Python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>页面点赞</title>
    <link href="https://super3h.me/2017/03/17/%E9%A1%B5%E9%9D%A2%E7%82%B9%E8%B5%9E/"/>
    <id>https://super3h.me/2017/03/17/页面点赞/</id>
    <published>2017-03-17T12:54:38.828Z</published>
    <updated>2017-05-28T10:17:35.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="页面点赞"><a href="#页面点赞" class="headerlink" title="页面点赞"></a>页面点赞</h1><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.zan</span>,<span class="selector-class">.zan1</span> &#123;</div><div class="line">				<span class="attribute">width</span>: <span class="number">60px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">				<span class="attribute">position</span>: relative;</div><div class="line">				<span class="attribute">float</span>: right;</div><div class="line">				<span class="attribute">padding-left</span>: <span class="number">40px</span>;</div><div class="line">				<span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">				<span class="comment">/* relative(相对定位) 对象不可层叠、不脱离文档流，参考自身静态位置通过 top,bottom,left,right 定位，并且可以通过z-index进行层次分级 */</span></div><div class="line">			&#125;</div><div class="line">			<span class="comment">/* after 伪元素在元素之前添加内容*/</span></div><div class="line">			</div><div class="line">			<span class="selector-class">.zan</span><span class="selector-pseudo">:before</span>,</div><div class="line">			<span class="selector-class">.zan1</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">				<span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">				<span class="attribute">border-radius</span>: <span class="number">30px</span> <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">				<span class="comment">/* 正方形的内切圆的半径等于正方形边长的一半 */</span></div><div class="line">				<span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">				<span class="comment">/* 长方形 */</span></div><div class="line">				<span class="attribute">background</span>: gray;</div><div class="line">				<span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-48deg);</div><div class="line">				<span class="comment">/* 逆时针旋转45°*/</span></div><div class="line">				<span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-48deg);</div><div class="line">				<span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-48deg);</div><div class="line">				<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-48deg);</div><div class="line">				<span class="attribute">position</span>: absolute;</div><div class="line">				<span class="comment">/* absolute(绝对定位) 脱离文档流，通过 top,bottom,left,right 定位 */</span></div><div class="line">				<span class="attribute">left</span>: <span class="number">20px</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">/* after 伪元素在元素之后添加内容*/</span></div><div class="line">			</div><div class="line">			<span class="selector-class">.zan</span><span class="selector-pseudo">:after</span>,</div><div class="line">			<span class="selector-class">.zan1</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">				<span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">				<span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">				<span class="attribute">background</span>: gray;</div><div class="line">				<span class="attribute">border-radius</span>: <span class="number">30px</span> <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">				<span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(48deg);</div><div class="line">				<span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(48deg);</div><div class="line">				<span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(48deg);</div><div class="line">				<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(48deg);</div><div class="line">				<span class="attribute">position</span>: absolute;</div><div class="line">				<span class="attribute">left</span>: <span class="number">28px</span>;</div><div class="line">				<span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="selector-class">.zan1</span><span class="selector-pseudo">:before</span>,</div><div class="line">			<span class="selector-class">.zan1</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">				<span class="attribute">background</span>: <span class="number">#4C9ED9</span>;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zan"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".zan"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">			$(<span class="keyword">this</span>).toggleClass(<span class="string">"zan1"</span>);</div><div class="line">			alert($(<span class="string">"&gt;input"</span>,<span class="keyword">this</span>).val());</div><div class="line">			<span class="keyword">var</span> classname=$(<span class="keyword">this</span>).attr(<span class="string">"class"</span>);</div><div class="line">			<span class="keyword">var</span> zan_num=<span class="built_in">parseInt</span>($(<span class="string">'&gt;span'</span>,<span class="keyword">this</span>).text());</div><div class="line">			<span class="keyword">if</span>(classname == <span class="string">"zan zan1"</span>)&#123;</div><div class="line">				zan_num +=<span class="number">1</span>;</div><div class="line">				$(<span class="string">'&gt;span'</span>,<span class="keyword">this</span>).text(zan_num);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(classname== <span class="string">"zan"</span>)&#123;</div><div class="line">				zan_num -=<span class="number">1</span>;</div><div class="line">				$(<span class="string">'&gt;span'</span>,<span class="keyword">this</span>).text(zan_num);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>将其简单改一下即可与后台同步</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">".zan"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				$(<span class="keyword">this</span>).toggleClass(<span class="string">"zan1"</span>);</div><div class="line">				<span class="keyword">var</span> classname=$(<span class="keyword">this</span>).attr(<span class="string">"class"</span>);</div><div class="line">				<span class="keyword">var</span> zan_num=<span class="built_in">parseInt</span>($(<span class="string">'&gt;span'</span>,<span class="keyword">this</span>).text());</div><div class="line">				<span class="keyword">var</span> anid = $(<span class="string">"&gt;input"</span>,<span class="keyword">this</span>).val();</div><div class="line">				<span class="keyword">if</span>(classname == <span class="string">"zan zan1"</span>)&#123;</div><div class="line">					zan_num +=<span class="number">1</span>;</div><div class="line">					$(<span class="string">'&gt;span'</span>,<span class="keyword">this</span>).text(zan_num);</div><div class="line">					$.post(<span class="string">"queryAction_agree"</span>,&#123;</div><div class="line">    					<span class="comment">//传入所需的数据</span></div><div class="line">						anid: anid,</div><div class="line">						<span class="attr">agreeNumber</span>: zan_num<span class="comment">//点赞数</span></div><div class="line">					&#125;);</div><div class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(classname== <span class="string">"zan"</span>)&#123;</div><div class="line">					zan_num -=<span class="number">1</span>;</div><div class="line">					$(<span class="string">'&gt;span'</span>,<span class="keyword">this</span>).text(zan_num);</div><div class="line">					$.post(<span class="string">"queryAction_disagree"</span>,&#123;</div><div class="line">    					<span class="comment">//传入所需的数据</span></div><div class="line">						anid: anid,</div><div class="line">						<span class="attr">agreeNumber</span>: zan_num<span class="comment">//点赞数</span></div><div class="line">					&#125;)</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>这里贴一张效果图</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/17/页面点赞/1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="原文参考"><a href="#原文参考" class="headerlink" title="原文参考"></a>原文参考</h1><p><a href="http://www.qdfuns.com/notes/14388/6c55f67462c70fc1e5042cf1d5417bf9.html" target="_blank" rel="external">点赞效果实现——点击♥后边的数量+1，再次点击♥后边的数量-1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;页面点赞&quot;&gt;&lt;a href=&quot;#页面点赞&quot; class=&quot;headerlink&quot; title=&quot;页面点赞&quot;&gt;&lt;/a&gt;页面点赞&lt;/h1&gt;&lt;h2 id=&quot;css样式&quot;&gt;&lt;a href=&quot;#css样式&quot; class=&quot;headerlink&quot; title=&quot;css样式&quot;&gt;
    
    </summary>
    
      <category term="html" scheme="https://super3h.me/categories/html/"/>
    
    
      <category term="html" scheme="https://super3h.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>前台学习</title>
    <link href="https://super3h.me/2017/03/14/%E5%89%8D%E5%8F%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>https://super3h.me/2017/03/14/前台学习/</id>
    <published>2017-03-14T08:50:57.405Z</published>
    <updated>2017-05-28T10:15:57.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="position-relative定位"><a href="#position-relative定位" class="headerlink" title="position:relative定位"></a>position:relative定位</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第二个div绝对定位是相对于它的父级元素</p>
</blockquote>
<h2 id="图片截取"><a href="#图片截取" class="headerlink" title="图片截取"></a>图片截取</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*-30px用来调整左右间距，-20px用来调整上下间距*/</span></div><div class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:url(imgUrl)</span> <span class="selector-tag">no-repeat</span> <span class="selector-tag">-30px</span> <span class="selector-tag">-20px</span>;</div></pre></td></tr></table></figure>
<h2 id="div浮动"><a href="#div浮动" class="headerlink" title="div浮动"></a>div浮动</h2><blockquote>
<p>这里直接贴链接，这位博主讲的特别清楚<a href="http://www.jianshu.com/p/07eb19957991" target="_blank" rel="external">CSS浮动float详解</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;position-relative定位&quot;&gt;&lt;a href=&quot;#position-relative定位&quot; class=&quot;header
    
    </summary>
    
      <category term="html" scheme="https://super3h.me/categories/html/"/>
    
    
      <category term="html" scheme="https://super3h.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Js技巧</title>
    <link href="https://super3h.me/2017/03/14/Js%E6%8A%80%E5%B7%A7/"/>
    <id>https://super3h.me/2017/03/14/Js技巧/</id>
    <published>2017-03-14T06:07:29.548Z</published>
    <updated>2017-05-28T10:01:22.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导航菜单div的切换"><a href="#导航菜单div的切换" class="headerlink" title="导航菜单div的切换"></a>导航菜单div的切换</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>通过点击事件将div属性由<code>display:none;</code>变为<code>display:block</code></p>
</blockquote>
<h2 id="样式布局如下"><a href="#样式布局如下" class="headerlink" title="样式布局如下:"></a>样式布局如下:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"4"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">default-active</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#question"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">style</span>=<span class="string">"padding-left:100px ;"</span>&gt;</span></div><div class="line">					提问</div><div class="line">				<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#add"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"padding-left:100px ;"</span>&gt;</span></div><div class="line">					添加</div><div class="line">				<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#answer"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">style</span>=<span class="string">"padding-left:100px ;"</span>&gt;</span></div><div class="line">					答案</div><div class="line">				<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#query"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"4"</span> <span class="attr">style</span>=<span class="string">"padding-left:100px ;"</span>&gt;</span></div><div class="line">					查询</div><div class="line">				<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"20"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkOutDiv"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index-1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkOutDiv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index-2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkOutDiv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index-3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkOutDiv"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">id</span>=<span class="string">"query"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index-4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="js代码逻辑"><a href="#js代码逻辑" class="headerlink" title="js代码逻辑"></a>js代码逻辑</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//给每个a标签添加click事件</span></div><div class="line">	$(<span class="string">"a"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="comment">//拿到a标签中 href属性的值</span></div><div class="line">		<span class="keyword">var</span> $clickElement = $(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);</div><div class="line">		<span class="comment">//遍历所有div</span></div><div class="line">		$.each($(<span class="string">".checkOutDiv"</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		<span class="comment">//获得div中id属性的值</span></div><div class="line">			<span class="keyword">var</span> $checkOut = $(<span class="keyword">this</span>).attr(<span class="string">"id"</span>);</div><div class="line">			<span class="keyword">if</span>($clickElement.indexOf($checkOut) != <span class="number">-1</span>) &#123;     <span class="comment">//如果a标签的href属性包含div标签的id的值(不包含返回-1)，则显示</span></div><div class="line">				$(<span class="keyword">this</span>).attr(<span class="string">"style"</span>, <span class="string">"display: block;"</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				$(<span class="keyword">this</span>).attr(<span class="string">"style"</span>, <span class="string">"display: none;"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>详细过程如上，举个例子:<font color="#7DD43C">点击<code>&lt;a href=&quot;#question&quot;&gt;</code>时,拿到href的值，即#question，此时查询所有div的id，若id=question时，发现#question包含question，则改变div属性dispalay:block</font></p>
</blockquote>
<h1 id="js实现表单提交和重置"><a href="#js实现表单提交和重置" class="headerlink" title="js实现表单提交和重置"></a>js实现表单提交和重置</h1><blockquote>
<p>代码如下:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重置</span></div><div class="line"><span class="built_in">document</span>.getElementById(formName).reset();</div><div class="line"><span class="comment">//提交</span></div><div class="line"><span class="built_in">document</span>.getElementById(formName).submit();</div></pre></td></tr></table></figure>
<h1 id="js正则表达式替换"><a href="#js正则表达式替换" class="headerlink" title="js正则表达式替换"></a>js正则表达式替换</h1><blockquote>
<p>博主这里要把图片对应的url换一下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1_1.jpg"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2_1.jpg"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>js的replace可以使用正则替换,将_1替换成_2，默认会全文搜索</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.each($(<span class="string">"img"</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="keyword">this</span>).bind(<span class="string">"mousemove"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> $src = $(<span class="keyword">this</span>).attr(<span class="string">"src"</span>);</div><div class="line">				<span class="keyword">var</span> changeSrc = $src.replace(<span class="regexp">/_\d/</span>,<span class="string">"_2"</span>);</div><div class="line">				$(<span class="string">"#showArea"</span>).html(<span class="string">"&lt;img src="</span>+changeSrc+<span class="string">" style='width:200px;height:300px' id='imgEnlarge' /&gt;"</span>)</div><div class="line">			&#125;)</div><div class="line">		&#125;);</div></pre></td></tr></table></figure>
<h1 id="判断元素内是否有内容或者有某个标签"><a href="#判断元素内是否有内容或者有某个标签" class="headerlink" title="判断元素内是否有内容或者有某个标签"></a>判断元素内是否有内容或者有某个标签</h1><h2 id="判断文本是否为空"><a href="#判断文本是否为空" class="headerlink" title="判断文本是否为空"></a>判断文本是否为空</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jqObj = $(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">if</span>(jqObj.text().trim())&#123; <span class="comment">//trim()方法是去空格，$.trim()函数删除提供字符串的所有换行符,空格（包括非中断空格），开始和结束tab。如果这些空白字符在字符串中间发生时，它们将被保留。</span></div><div class="line">    jqObj.hide();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断这个标签下是否有某个已知的元素，比如判断ul标签下是否有li元素"><a href="#判断这个标签下是否有某个已知的元素，比如判断ul标签下是否有li元素" class="headerlink" title="判断这个标签下是否有某个已知的元素，比如判断ul标签下是否有li元素"></a>判断这个标签下是否有某个已知的元素，比如判断ul标签下是否有li元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jqObj = $(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">if</span>(!jqObj.has(<span class="string">'li'</span>).length)&#123;</div><div class="line">    jqObj.hide();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.cnblogs.com/acafaxy/archive/2012/02/02/JQuery.html" target="_blank" rel="external">JQuery判断一个元素下面是否有内容或者有某个标签</a>感谢这位作者解决了我的困惑，真诚的感谢，哈哈!</p>
</blockquote>
<h1 id="mousemove事件获取鼠标位置"><a href="#mousemove事件获取鼠标位置" class="headerlink" title="mousemove事件获取鼠标位置"></a>mousemove事件获取鼠标位置</h1><blockquote>
<p>直接上代码</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#showArea"</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">			e.pageX;<span class="comment">//鼠标x轴</span></div><div class="line">			e.pageX;<span class="comment">//鼠标y轴</span></div><div class="line">		&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导航菜单div的切换&quot;&gt;&lt;a href=&quot;#导航菜单div的切换&quot; class=&quot;headerlink&quot; title=&quot;导航菜单div的切换&quot;&gt;&lt;/a&gt;导航菜单div的切换&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerli
    
    </summary>
    
      <category term="js" scheme="https://super3h.me/categories/js/"/>
    
    
      <category term="js" scheme="https://super3h.me/tags/js/"/>
    
  </entry>
  
</feed>
